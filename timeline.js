// Generated by CoffeeScript 1.9.1
(function() {
  var Timeline, log,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  log = function(x) {
    return console.log(x);
  };

  Timeline = (function() {
    function Timeline(container, config, items) {
      var group, i, item, j, k, l, len, len1, len2, len3, len4, line, m, range, ref, ref1, ref2, ref3, rule;
      if (config == null) {
        config = {};
      }
      if (items == null) {
        items = [];
      }
      this.$container = $(container);
      this.config = $.extend(true, this.getDefaultConfig(), config);
      this.util = new Timeline.Util;
      this.sidebar = this.createElement('Sidebar');
      this.ruler = this.createElement('Ruler');
      this.field = this.createElement('Field');
      this.ranges = [];
      ref = this.config.ranges;
      for (i = 0, len = ref.length; i < len; i++) {
        range = ref[i];
        this.addRange(range);
      }
      this.groups = [];
      ref1 = this.config.groups;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        group = ref1[j];
        this.addGroup(group);
      }
      this.lines = [];
      ref2 = this.config.lines;
      for (k = 0, len2 = ref2.length; k < len2; k++) {
        line = ref2[k];
        this.addLine(line);
      }
      this.dashRules = [];
      ref3 = this.config.dashRules;
      for (l = 0, len3 = ref3.length; l < len3; l++) {
        rule = ref3[l];
        this.addDashRule(rule);
      }
      this.items = [];
      for (m = 0, len4 = items.length; m < len4; m++) {
        item = items[m];
        this.addItem(item);
      }
      this.build();
    }

    Timeline.prototype.createElement = function(type, data) {
      if (data == null) {
        data = {};
      }
      return new this.constructor[type](this, data);
    };

    Timeline.prototype.addRange = function(range) {
      var elseRange, i, len, ref;
      ref = this.ranges;
      for (i = 0, len = ref.length; i < len; i++) {
        elseRange = ref[i];
        if (range.from < elseRange.raw.to && range.to > elseRange.raw.from) {
          throw 'Can\'t add range overlapping existing one';
        }
      }
      this.ranges.push(this.createElement('Range', range));
      return this.ranges = this.ranges.sort(function(a, b) {
        return a.raw.from - b.raw.from;
      });
    };

    Timeline.prototype.addGroup = function(group) {
      var elseGroup, i, len, ref;
      ref = this.groups;
      for (i = 0, len = ref.length; i < len; i++) {
        elseGroup = ref[i];
        if (elseGroup.raw.id === group.id) {
          throw 'Can\'t add group with same id as existing one has';
        }
      }
      this.groups.push(this.createElement('Group', group));
      return this.groups = this.groups.sort(function(a, b) {
        var ref1, ref2;
        return ((ref1 = a.raw.order) != null ? ref1 : 0) - ((ref2 = b.raw.order) != null ? ref2 : 0);
      });
    };

    Timeline.prototype.addLine = function(line) {
      var elseLine, i, len, ref;
      ref = this.lines;
      for (i = 0, len = ref.length; i < len; i++) {
        elseLine = ref[i];
        if (elseLine.raw.id === line.id) {
          throw 'Can\'t add line with same id as existing one has';
        }
      }
      this.lines.push(this.createElement('Line', line));
      return this.lines = this.lines.sort(function(a, b) {
        var ref1, ref2;
        return ((ref1 = a.raw.order) != null ? ref1 : 0) - ((ref2 = b.raw.order) != null ? ref2 : 0);
      });
    };

    Timeline.prototype.addDashRule = function(rule) {
      var elseRule, i, len, ref;
      ref = this.dashRules;
      for (i = 0, len = ref.length; i < len; i++) {
        elseRule = ref[i];
        if (elseRule.id === rule.id) {
          throw 'Can\'t add dash rule with same id as existing one has';
        }
      }
      this.dashRules.push(rule);
      return this.dashRules = this.dashRules.sort(function(a, b) {
        var ref1, ref2;
        return ((ref1 = a.order) != null ? ref1 : 0) - ((ref2 = b.order) != null ? ref2 : 0);
      });
    };

    Timeline.prototype.addItem = function(obj) {
      var item;
      item = this.createElement('Item', obj);
      if (!item.isValid()) {
        throw 'Can\'t add item due to its invalidity';
      }
      return this.items.push(item);
    };

    Timeline.prototype.getDefaultConfig = function() {
      return {
        ruler: {
          position: 'top',
          height: 50
        },
        sidebar: {
          position: 'left',
          width: 100
        },
        range: {
          extraOffset: {
            before: 5,
            after: 15
          },
          render: null,
          renderAtRuler: null
        },
        group: {
          height: 500,
          extraOffset: {
            before: 20,
            after: 20
          }
        },
        line: {
          height: 50,
          extraOffset: {
            before: 5,
            after: 10
          },
          render: null,
          renderAtSidebar: null
        },
        item: {
          isDraggable: true,
          canCrossRanges: true,
          render: null
        },
        dash: {
          render: null
        },
        scale: 1,
        dashRules: [],
        ranges: [],
        groups: [],
        lines: []
      };
    };

    Timeline.prototype.build = function() {
      this.$root = this.util.addDom('root', this.$container);
      this.sidebar.build();
      this.ruler.build();
      return this.field.build();
    };

    Timeline.prototype.calcDashes = function() {
      var dash, dashRule, dashes, i, j, k, len, len1, len2, map, range, ref, ref1, time;
      dashes = [];
      ref = this.dashRules;
      for (i = 0, len = ref.length; i < len; i++) {
        dashRule = ref[i];
        ref1 = this.ranges;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          range = ref1[j];
          if (dashRule.type === 'every') {
            dashes = dashes.concat(this.calcDashesEvery(range, dashRule));
          }
        }
      }
      map = {};
      for (k = 0, len2 = dashes.length; k < len2; k++) {
        dash = dashes[k];
        if (map[dash.time] == null) {
          map[dash.time] = dash;
        }
      }
      dashes = [];
      for (time in map) {
        dash = map[time];
        dashes.push(this.createElement('Dash', dash));
      }
      return dashes;
    };

    Timeline.prototype.calcDashesEvery = function(range, rule) {
      var dashes, time;
      dashes = [];
      time = range.raw.from;
      while (time < range.raw.to) {
        dashes.push({
          time: time,
          rule: rule
        });
        time += rule.step;
      }
      return dashes;
    };

    Timeline.prototype.getGroupById = function(groupId) {
      var group, i, len, ref;
      ref = this.groups;
      for (i = 0, len = ref.length; i < len; i++) {
        group = ref[i];
        if (group.raw.id === groupId) {
          return group;
        }
      }
    };

    Timeline.prototype.getRangeByTime = function(time) {
      var i, len, range, ref;
      ref = this.ranges;
      for (i = 0, len = ref.length; i < len; i++) {
        range = ref[i];
        if ((range.raw.from <= time && time < range.raw.to)) {
          return range;
        }
      }
    };

    Timeline.prototype.getRangeByOffset = function(offset) {
      var i, len, range, rangeEnd, rangeStart, ref;
      ref = this.ranges;
      for (i = 0, len = ref.length; i < len; i++) {
        range = ref[i];
        rangeStart = range.getOffset() + range.getInternalOffset(range.raw.from);
        rangeEnd = rangeStart + range.getInnerWidth();
        if ((rangeStart <= offset && offset < rangeEnd)) {
          return range;
        }
      }
    };

    Timeline.prototype.getLineById = function(lineId) {
      var i, len, line, ref;
      ref = this.lines;
      for (i = 0, len = ref.length; i < len; i++) {
        line = ref[i];
        if (line.raw.id === lineId) {
          return line;
        }
      }
    };

    Timeline.prototype.getLineByVerticalOffset = function(group, verticalOffset) {
      var i, len, line, lineEnd, lineStart, ref;
      ref = group.getLines();
      for (i = 0, len = ref.length; i < len; i++) {
        line = ref[i];
        lineStart = line.getVerticalOffset() + line.getInternalVerticalOffset();
        lineEnd = lineStart + line.getInnerHeight();
        if ((lineStart <= verticalOffset && verticalOffset < lineEnd)) {
          return line;
        }
      }
    };

    Timeline.prototype.getTime = function(offset) {
      var range;
      range = this.getRangeByOffset(offset);
      if (range != null) {
        return range.getTimeByOffset(offset);
      }
    };

    Timeline.prototype.getOffset = function(time) {
      var range;
      if (time != null) {
        range = this.getRangeByTime(time);
        if (range != null) {
          return range.getOffset() + range.getInternalOffset(time);
        }
      }
    };

    Timeline.prototype.approxOffset = function(offset) {
      return this.getOffset(this.approxTime(this.getTime(offset)));
    };

    Timeline.prototype.approxTime = function(time) {
      var approxed, snapResolution;
      if (time != null) {
        snapResolution = 3 * 60 * 60;
        approxed = Math.round(time / snapResolution) * snapResolution;
        if (this.getRangeByTime(approxed)) {
          return approxed;
        } else {
          approxed = Math.ceil(time / snapResolution) * snapResolution;
          if (this.getRangeByTime(approxed)) {
            return approxed;
          } else {
            approxed = Math.floor(time / snapResolution) * snapResolution;
            if (this.getRangeByTime(approxed)) {
              return approxed;
            }
          }
        }
      }
    };

    return Timeline;

  })();

  Timeline.Util = (function() {
    function Util() {}

    Util.prototype.addDom = function(name, $container) {
      var $element;
      $element = $('<div />').addClass("tl-" + name);
      if ($container) {
        $element.appendTo(this.getScrollContainer($container));
      }
      return $element;
    };

    Util.prototype.scrollize = function($element, axis, pairs) {
      var $inner, config;
      if (pairs == null) {
        pairs = [];
      }
      $inner = this.addDom('scroll-inner', $element);
      $element.data('scroll-inner', $inner);
      config = {
        theme: 'dark-2',
        autoHideScrollbar: true,
        axis: axis,
        scrollInertia: 0,
        mouseWheel: {
          scrollAmount: 30
        },
        callbacks: {}
      };
      if (axis === 'xy') {
        config.mouseWheel.axis = 'x';
      }
      if (pairs.length) {
        config.callbacks.whileScrolling = function() {
          var $targets, i, len, pair, position, results;
          results = [];
          for (i = 0, len = pairs.length; i < len; i++) {
            pair = pairs[i];
            position = {};
            if (pair.axis.indexOf('x') > -1) {
              position.x = this.mcs.left + 'px';
            }
            if (pair.axis.indexOf('y') > -1) {
              position.y = this.mcs.top + 'px';
            }
            $targets = pair.getTarget();
            if ($targets.length) {
              results.push($.each($targets, function() {
                return $(this).mCustomScrollbar('scrollTo', position, {
                  scrollInertia: 0,
                  timeout: 0,
                  callbacks: false
                });
              }));
            } else {
              results.push(void 0);
            }
          }
          return results;
        };
      }
      return $element.mCustomScrollbar(config);
    };

    Util.prototype.getScrollContainer = function($element) {
      var $inner;
      $inner = $element.data('scroll-inner');
      if ($inner != null ? $inner.length : void 0) {
        return $inner;
      } else {
        return $element;
      }
    };

    Util.prototype.setInnerSize = function($element, size) {
      var css;
      css = {};
      if (size.x) {
        css.width = size.x;
      }
      if (size.y) {
        css.height = size.y;
      }
      this.getScrollContainer($element).css(css);
      return $element.mCustomScrollbar('update');
    };

    Util.prototype.arraySum = function(array) {
      var i, len, sum, value;
      sum = 0;
      for (i = 0, len = array.length; i < len; i++) {
        value = array[i];
        sum += value;
      }
      return sum;
    };

    return Util;

  })();

  Timeline.Element = (function() {
    function Element(timeline, raw) {
      this.timeline = timeline;
      this.raw = raw != null ? raw : {};
      this.init();
    }

    Element.prototype.init = function() {};

    Element.prototype.cfg = function() {
      return this.timeline.config;
    };

    Element.prototype.u = function() {
      return this.timeline.util;
    };

    return Element;

  })();

  Timeline.Sidebar = (function(superClass) {
    extend(Sidebar, superClass);

    function Sidebar() {
      return Sidebar.__super__.constructor.apply(this, arguments);
    }

    Sidebar.prototype.build = function() {
      this.$dom = this.u().addDom('sidebar', this.timeline.$root);
      this.place();
      return this.buildGroups();
    };

    Sidebar.prototype.place = function() {
      this.$dom.css(this.cfg().ruler.position === 'top' ? {
        top: this.cfg().ruler.height,
        bottom: 0
      } : {
        top: 0,
        bottom: this.cfg().ruler.height
      });
      this.$dom.css(this.cfg().sidebar.position === 'left' ? {
        left: 0,
        right: 'auto'
      } : {
        left: 'auto',
        right: 0
      });
      return this.$dom.css({
        width: this.cfg().sidebar.width
      });
    };

    Sidebar.prototype.buildGroups = function() {
      var group, i, len, ref, results;
      ref = this.timeline.groups;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        group = ref[i];
        results.push(group.buildAtSidebar());
      }
      return results;
    };

    return Sidebar;

  })(Timeline.Element);

  Timeline.Ruler = (function(superClass) {
    extend(Ruler, superClass);

    function Ruler() {
      return Ruler.__super__.constructor.apply(this, arguments);
    }

    Ruler.prototype.build = function() {
      this.$dom = this.u().addDom('ruler', this.timeline.$root);
      this.u().scrollize(this.$dom, 'x', [
        {
          axis: 'x',
          getTarget: (function(_this) {
            return function() {
              var group, i, len, ref, results;
              ref = _this.timeline.groups;
              results = [];
              for (i = 0, len = ref.length; i < len; i++) {
                group = ref[i];
                results.push(group.$dom);
              }
              return results;
            };
          })(this)
        }
      ]);
      this.place();
      this.buildRanges();
      return this.buildDashes();
    };

    Ruler.prototype.place = function() {
      var range;
      this.$dom.css(this.cfg().sidebar.position === 'left' ? {
        left: this.cfg().sidebar.width,
        right: 0
      } : {
        left: 0,
        right: this.cfg().sidebar.width
      });
      this.$dom.css(this.cfg().ruler.position === 'top' ? {
        top: 0,
        bottom: 'auto'
      } : {
        top: 'auto',
        bottom: 0
      });
      this.$dom.css({
        height: this.cfg().ruler.height
      });
      return this.u().setInnerSize(this.$dom, {
        x: this.u().arraySum((function() {
          var i, len, ref, results;
          ref = this.timeline.ranges;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            range = ref[i];
            results.push(range.getOuterWidth());
          }
          return results;
        }).call(this)),
        y: this.cfg().ruler.height
      });
    };

    Ruler.prototype.buildRanges = function() {
      var i, len, range, ref, results;
      ref = this.timeline.ranges;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        range = ref[i];
        results.push(range.buildAtRuler());
      }
      return results;
    };

    Ruler.prototype.buildDashes = function() {
      var dash, i, len, ref, results;
      ref = this.timeline.calcDashes();
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        dash = ref[i];
        results.push(dash.buildAtRuler());
      }
      return results;
    };

    return Ruler;

  })(Timeline.Element);

  Timeline.Field = (function(superClass) {
    extend(Field, superClass);

    function Field() {
      return Field.__super__.constructor.apply(this, arguments);
    }

    Field.prototype.build = function() {
      this.$dom = this.u().addDom('field', this.timeline.$root);
      this.place();
      return this.buildGroups();
    };

    Field.prototype.place = function() {
      this.$dom.css(this.cfg().ruler.position === 'top' ? {
        top: this.cfg().ruler.height,
        bottom: 0
      } : {
        top: 0,
        bottom: this.cfg().ruler.height
      });
      return this.$dom.css(this.cfg().sidebar.position === 'left' ? {
        left: this.cfg().sidebar.width,
        right: 0
      } : {
        left: 0,
        right: this.cfg().sidebar.width
      });
    };

    Field.prototype.buildGroups = function() {
      var group, i, len, ref, results;
      ref = this.timeline.groups;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        group = ref[i];
        results.push(group.build());
      }
      return results;
    };

    return Field;

  })(Timeline.Element);

  Timeline.Group = (function(superClass) {
    extend(Group, superClass);

    function Group() {
      return Group.__super__.constructor.apply(this, arguments);
    }

    Group.prototype.getLines = function() {
      var i, len, line, ref, results;
      ref = this.timeline.lines;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        line = ref[i];
        if (line.raw.groupId === this.raw.id) {
          results.push(line);
        }
      }
      return results;
    };

    Group.prototype.getVerticalOffset = function() {
      var elseGroup, x;
      return x = this.u().arraySum((function() {
        var i, len, ref, results;
        ref = this.timeline.groups;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          elseGroup = ref[i];
          if (elseGroup.raw.id === this.raw.id) {
            break;
          }
          results.push(elseGroup.getOuterHeight());
        }
        return results;
      }).call(this));
    };

    Group.prototype.getInnerHeight = function() {
      var ref;
      return (ref = this.raw.height) != null ? ref : this.cfg().group.height;
    };

    Group.prototype.getOuterHeight = function() {
      return this.getInnerHeight() + this.cfg().group.extraOffset.before + this.cfg().group.extraOffset.after;
    };

    Group.prototype.build = function() {
      this.$dom = this.u().addDom('group', this.timeline.field.$dom);
      this.u().scrollize(this.$dom, 'xy', [
        {
          axis: 'x',
          getTarget: (function(_this) {
            return function() {
              var elseGroup;
              return [_this.timeline.ruler.$dom].concat((function() {
                var i, len, ref, results;
                ref = this.timeline.groups;
                results = [];
                for (i = 0, len = ref.length; i < len; i++) {
                  elseGroup = ref[i];
                  if (elseGroup !== this) {
                    results.push(elseGroup.$dom);
                  }
                }
                return results;
              }).call(_this));
            };
          })(this)
        }, {
          axis: 'y',
          getTarget: (function(_this) {
            return function() {
              return _this.$sidebarDom;
            };
          })(this)
        }
      ]);
      this.render();
      this.place();
      this.buildLines();
      this.buildRanges();
      this.buildDashes();
      return this.buildItems();
    };

    Group.prototype.render = function() {
      var ref, ref1;
      return ((ref = (ref1 = this.raw.render) != null ? ref1 : this.cfg().group.render) != null ? ref : this.constructor.render).call(this);
    };

    Group.render = function() {
      return this.u().getScrollContainer(this.$dom).empty();
    };

    Group.prototype.place = function() {
      var ref, ref1;
      return ((ref = (ref1 = this.raw.place) != null ? ref1 : this.cfg().group.place) != null ? ref : this.constructor.place).call(this);
    };

    Group.place = function() {
      var line, range;
      this.$dom.css({
        top: this.getVerticalOffset(),
        height: this.raw.height
      });
      return this.u().setInnerSize(this.$dom, {
        x: this.u().arraySum((function() {
          var i, len, ref, results;
          ref = this.timeline.ranges;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            range = ref[i];
            results.push(range.getOuterWidth());
          }
          return results;
        }).call(this)),
        y: this.u().arraySum((function() {
          var i, len, ref, results;
          ref = this.getLines();
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            line = ref[i];
            results.push(line.getOuterHeight());
          }
          return results;
        }).call(this))
      });
    };

    Group.prototype.buildLines = function() {
      var i, len, line, ref, results;
      ref = this.getLines();
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        line = ref[i];
        results.push(line.build());
      }
      return results;
    };

    Group.prototype.buildRanges = function() {
      var i, len, range, ref, results;
      ref = this.timeline.ranges;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        range = ref[i];
        results.push(range.build(this));
      }
      return results;
    };

    Group.prototype.buildDashes = function() {
      var dash, i, len, ref, results;
      ref = this.timeline.calcDashes();
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        dash = ref[i];
        results.push(dash.build(this));
      }
      return results;
    };

    Group.prototype.buildItems = function() {
      var i, item, len, ref, results;
      ref = this.timeline.items;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        if (item.getLine().raw.groupId === this.raw.id) {
          results.push(item.build());
        }
      }
      return results;
    };

    Group.prototype.buildAtSidebar = function() {
      this.$sidebarDom = this.u().addDom('group', this.timeline.sidebar.$dom);
      this.u().scrollize(this.$sidebarDom, 'y', [
        {
          axis: 'y',
          getTarget: (function(_this) {
            return function() {
              return _this.$dom;
            };
          })(this)
        }
      ]);
      this.placeAtSidebar();
      return this.buildLinesAtSidebar();
    };

    Group.prototype.placeAtSidebar = function() {
      var line;
      this.$sidebarDom.css({
        top: this.getVerticalOffset(),
        height: this.raw.height
      });
      return this.u().setInnerSize(this.$sidebarDom, {
        x: this.cfg().sidebar.width,
        y: this.u().arraySum((function() {
          var i, len, ref, results;
          ref = this.getLines();
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            line = ref[i];
            results.push(line.getOuterHeight());
          }
          return results;
        }).call(this))
      });
    };

    Group.prototype.buildLinesAtSidebar = function() {
      var i, len, line, ref, results;
      ref = this.getLines();
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        line = ref[i];
        results.push(line.buildAtSidebar());
      }
      return results;
    };

    return Group;

  })(Timeline.Element);

  Timeline.Range = (function(superClass) {
    extend(Range, superClass);

    function Range() {
      return Range.__super__.constructor.apply(this, arguments);
    }

    Range.prototype.init = function() {
      return this.$doms = [];
    };

    Range.prototype.getOffset = function() {
      var elseRange;
      return this.u().arraySum((function() {
        var i, len, ref, results;
        ref = this.timeline.ranges;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          elseRange = ref[i];
          if (elseRange.raw.from < this.raw.from) {
            results.push(elseRange.getOuterWidth());
          }
        }
        return results;
      }).call(this));
    };

    Range.prototype.getInternalOffset = function(time) {
      return this.getExtraOffsetBefore() + Math.ceil(time / this.cfg().scale) - Math.ceil(this.raw.from / this.cfg().scale);
    };

    Range.prototype.getInnerWidth = function() {
      return Math.ceil(this.raw.to / this.cfg().scale) - Math.ceil(this.raw.from / this.cfg().scale);
    };

    Range.prototype.getOuterWidth = function() {
      return this.getInnerWidth() + this.getExtraOffsetBefore() + this.getExtraOffsetAfter();
    };

    Range.prototype.getExtraOffsetBefore = function() {
      var ref;
      return (ref = this.raw.extraOffsetBefore) != null ? ref : this.cfg().range.extraOffset.before;
    };

    Range.prototype.getExtraOffsetAfter = function() {
      var ref;
      return (ref = this.raw.extraOffsetAfter) != null ? ref : this.cfg().range.extraOffset.after;
    };

    Range.prototype.getTimeByOffset = function(offset) {
      return this.getTimeByInternalOffset(offset - this.getOffset() - this.getExtraOffsetBefore());
    };

    Range.prototype.getTimeByInternalOffset = function(internalOffset) {
      return this.raw.from + internalOffset * this.cfg().scale;
    };

    Range.prototype.build = function(group) {
      var $dom;
      $dom = this.u().addDom('range', group.$dom);
      this.$doms.push($dom);
      this.render($dom);
      return this.place($dom);
    };

    Range.prototype.render = function($dom) {
      var ref, ref1;
      return ((ref = (ref1 = this.raw.render) != null ? ref1 : this.cfg().range.render) != null ? ref : this.constructor.render).call(this, $dom);
    };

    Range.render = function($dom) {
      return $dom.empty();
    };

    Range.prototype.place = function($dom) {
      var ref, ref1;
      return ((ref = (ref1 = this.raw.place) != null ? ref1 : this.cfg().range.place) != null ? ref : this.constructor.place).call(this, $dom);
    };

    Range.place = function($dom) {
      return $dom.css({
        left: this.getOffset(),
        width: this.getInnerWidth()
      });
    };

    Range.prototype.buildAtRuler = function() {
      this.$rulerDom = this.u().addDom('range', this.timeline.ruler.$dom);
      this.renderAtRuler();
      return this.placeAtRuler();
    };

    Range.prototype.renderAtRuler = function() {
      var ref, ref1;
      return ((ref = (ref1 = this.raw.renderAtRuler) != null ? ref1 : this.cfg().range.renderAtRuler) != null ? ref : this.constructor.renderAtRuler).call(this);
    };

    Range.renderAtRuler = function() {
      var from, to;
      from = moment.unix(this.raw.from).format('DD.MM.YYYY HH:mm:ss');
      to = moment.unix(this.raw.to).format('DD.MM.YYYY HH:mm:ss');
      return this.$rulerDom.empty().append(this.u().addDom('heading').text(from + " — " + to));
    };

    Range.prototype.placeAtRuler = function() {
      var ref, ref1;
      return ((ref = (ref1 = this.raw.placeAtRuler) != null ? ref1 : this.cfg().range.placeAtRuler) != null ? ref : this.constructor.placeAtRuler).call(this);
    };

    Range.placeAtRuler = function() {
      return this.$rulerDom.css({
        left: this.getOffset(),
        width: this.getInnerWidth()
      });
    };

    return Range;

  })(Timeline.Element);

  Timeline.Dash = (function(superClass) {
    extend(Dash, superClass);

    function Dash() {
      return Dash.__super__.constructor.apply(this, arguments);
    }

    Dash.prototype.init = function() {
      return this.$doms = [];
    };

    Dash.prototype.build = function(group) {
      var $dom;
      $dom = this.u().addDom('dash', group.$dom);
      $dom.addClass("id-" + this.raw.rule.id);
      this.$doms.push($dom);
      this.render($dom);
      return this.place($dom);
    };

    Dash.prototype.render = function($dom) {
      var ref, ref1;
      return ((ref = (ref1 = this.raw.render) != null ? ref1 : this.cfg().dash.render) != null ? ref : this.constructor.render).call(this, $dom);
    };

    Dash.render = function($dom) {
      return $dom.empty();
    };

    Dash.prototype.place = function($dom) {
      var ref, ref1;
      return ((ref = (ref1 = this.raw.place) != null ? ref1 : this.cfg().dash.place) != null ? ref : this.constructor.place).call(this, $dom);
    };

    Dash.place = function($dom) {
      var offset;
      offset = this.timeline.getOffset(this.raw.time);
      if (offset != null) {
        return $dom.css({
          left: offset
        });
      }
    };

    Dash.prototype.buildAtRuler = function(dash) {
      this.$rulerDom = this.u().addDom('dash', this.timeline.ruler.$dom);
      this.$rulerDom.addClass("id-" + this.raw.rule.id);
      this.renderAtRuler();
      return this.placeAtRuler();
    };

    Dash.prototype.renderAtRuler = function() {
      var ref, ref1;
      return ((ref = (ref1 = this.raw.renderAtRuler) != null ? ref1 : this.cfg().dash.renderAtRuler) != null ? ref : this.constructor.renderAtRuler).call(this);
    };

    Dash.renderAtRuler = function() {
      return this.$rulerDom.empty();
    };

    Dash.prototype.placeAtRuler = function() {
      var ref, ref1;
      return ((ref = (ref1 = this.raw.placeAtRuler) != null ? ref1 : this.cfg().dash.placeAtRuler) != null ? ref : this.constructor.placeAtRuler).call(this);
    };

    Dash.placeAtRuler = function() {
      var offset;
      offset = this.timeline.getOffset(this.raw.time);
      if (offset != null) {
        return this.$rulerDom.css({
          left: offset
        });
      }
    };

    return Dash;

  })(Timeline.Element);

  Timeline.Line = (function(superClass) {
    extend(Line, superClass);

    function Line() {
      return Line.__super__.constructor.apply(this, arguments);
    }

    Line.prototype.getVerticalOffset = function() {
      var elseLine;
      return this.u().arraySum((function() {
        var i, len, ref, results;
        ref = this.timeline.lines;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          elseLine = ref[i];
          if (!(elseLine.raw.groupId === this.raw.groupId)) {
            continue;
          }
          if (elseLine.raw.id === this.raw.id) {
            break;
          }
          results.push(elseLine.getOuterHeight());
        }
        return results;
      }).call(this));
    };

    Line.prototype.getInternalVerticalOffset = function() {
      return this.getExtraOffsetBefore();
    };

    Line.prototype.getInnerHeight = function() {
      var ref;
      return (ref = this.raw.height) != null ? ref : this.cfg().line.height;
    };

    Line.prototype.getOuterHeight = function() {
      return this.getInnerHeight() + this.getExtraOffsetBefore() + this.getExtraOffsetAfter();
    };

    Line.prototype.getGroup = function() {
      return this.timeline.getGroupById(this.raw.groupId);
    };

    Line.prototype.getExtraOffsetBefore = function() {
      var ref;
      return (ref = this.raw.extraOffsetBefore) != null ? ref : this.cfg().line.extraOffset.before;
    };

    Line.prototype.getExtraOffsetAfter = function() {
      var ref;
      return (ref = this.raw.extraOffsetAfter) != null ? ref : this.cfg().line.extraOffset.after;
    };

    Line.prototype.build = function() {
      this.$dom = this.u().addDom('line', this.getGroup().$dom);
      this.render();
      return this.place();
    };

    Line.prototype.render = function() {
      var ref, ref1;
      return ((ref = (ref1 = this.raw.render) != null ? ref1 : this.cfg().line.render) != null ? ref : this.constructor.render).call(this);
    };

    Line.render = function() {
      return this.$dom.empty();
    };

    Line.prototype.place = function() {
      var ref, ref1;
      return ((ref = (ref1 = this.raw.place) != null ? ref1 : this.cfg().line.place) != null ? ref : this.constructor.place).call(this);
    };

    Line.place = function() {
      return this.$dom.css({
        top: this.getVerticalOffset(),
        height: this.getInnerHeight()
      });
    };

    Line.prototype.buildAtSidebar = function() {
      this.$sidebarDom = this.u().addDom('line', this.getGroup().$sidebarDom);
      this.renderAtSidebar();
      return this.placeAtSidebar();
    };

    Line.prototype.renderAtSidebar = function() {
      var ref, ref1;
      return ((ref = (ref1 = this.raw.renderAtSidebar) != null ? ref1 : this.cfg().line.renderAtSidebar) != null ? ref : this.constructor.renderAtSidebar).call(this);
    };

    Line.renderAtSidebar = function() {
      return this.$sidebarDom.empty().append(this.u().addDom('heading').text(this.raw.id));
    };

    Line.prototype.placeAtSidebar = function() {
      var ref, ref1;
      return ((ref = (ref1 = this.raw.placeAtSidebar) != null ? ref1 : this.cfg().line.placeAtSidebar) != null ? ref : this.constructor.placeAtSidebar).call(this);
    };

    Line.placeAtSidebar = function() {
      return this.$sidebarDom.css({
        top: this.getVerticalOffset(),
        height: this.getInnerHeight()
      });
    };

    return Line;

  })(Timeline.Element);

  Timeline.Item = (function(superClass) {
    extend(Item, superClass);

    function Item() {
      return Item.__super__.constructor.apply(this, arguments);
    }

    Item.prototype.getLine = function() {
      return this.timeline.getLineById(this.raw.lineId);
    };

    Item.prototype.getDuration = function() {
      return this.raw.to - this.raw.from;
    };

    Item.prototype.isDraggable = function() {
      var ref, ref1;
      return (ref = (ref1 = this.raw.isDraggable) != null ? ref1 : this.cfg().item.isDraggable) != null ? ref : true;
    };

    Item.prototype.canCrossRanges = function() {
      var ref, ref1;
      return (ref = (ref1 = this.raw.canCrossRanges) != null ? ref1 : this.cfg().item.canCrossRanges) != null ? ref : true;
    };

    Item.prototype.build = function() {
      this.$dom = this.u().addDom('item', this.getLine().getGroup().$dom);
      this.render();
      this.place();
      return this.makeDraggable();
    };

    Item.prototype.render = function() {
      var ref, ref1;
      return ((ref = (ref1 = this.raw.render) != null ? ref1 : this.cfg().item.render) != null ? ref : this.constructor.render).call(this);
    };

    Item.render = function() {
      return this.$dom.empty().append(this.u().addDom('text').text(this.raw.text));
    };

    Item.prototype.place = function() {
      var ref, ref1;
      return ((ref = (ref1 = this.raw.place) != null ? ref1 : this.cfg().item.place) != null ? ref : this.constructor.place).call(this);
    };

    Item.place = function() {
      var line, offset;
      line = this.getLine();
      offset = this.timeline.getOffset(this.raw.from);
      return this.$dom.css({
        top: line.getVerticalOffset() + line.getInternalVerticalOffset(),
        height: line.getInnerHeight(),
        left: offset,
        width: this.timeline.getOffset(this.raw.to - 1) - offset
      });
    };

    Item.prototype.makeDraggable = function() {
      var modified;
      this.$dragHint = null;
      modified = null;
      return this.$dom.draggable({
        helper: (function(_this) {
          return function() {
            return $('<div />').css({
              width: _this.$dom.css('width'),
              height: _this.$dom.css('height')
            });
          };
        })(this),
        start: (function(_this) {
          return function(e, ui) {
            _this.$dragHint = _this.u().addDom('drag-hint', _this.getLine().getGroup().$dom);
            return modified = $.extend(true, {}, _this);
          };
        })(this),
        stop: (function(_this) {
          return function(e, ui) {
            _this.$dragHint.remove();
            return modified = null;
          };
        })(this),
        drag: (function(_this) {
          return function(e, ui) {
            var drag, duration, group, newLine;
            group = _this.getLine().getGroup();
            drag = {
              parentOffset: _this.u().getScrollContainer(group.$dom).offset(),
              event: e,
              ui: ui
            };
            _this.renderDragHint(drag);
            _this.placeDragHint(drag);
            duration = _this.getDuration();
            modified.raw.from = _this.timeline.approxTime(_this.timeline.getTime(drag.ui.position.left));
            modified.raw.to = modified.raw.from + duration;
            newLine = _this.timeline.getLineByVerticalOffset(group, drag.event.pageY - drag.parentOffset.top);
            if (newLine) {
              modified.raw.lineId = newLine.raw.id;
            }
            if (modified.isValid() && _this.canChangeTo(modified)) {
              $.extend(_this.raw, modified.raw);
              return _this.place();
            }
          };
        })(this)
      });
    };

    Item.prototype.canChangeTo = function(modified) {
      var ref, ref1;
      return ((ref = (ref1 = this.raw.canChangeTo) != null ? ref1 : this.cfg().item.canChangeTo) != null ? ref : this.constructor.canChangeTo).call(this, modified);
    };

    Item.canChangeTo = function(modified) {
      return true;
    };

    Item.prototype.isValid = function() {
      var rangeFrom, rangeTo;
      rangeFrom = this.timeline.getRangeByTime(this.raw.from);
      if (rangeFrom == null) {
        return false;
      }
      rangeTo = this.timeline.getRangeByTime(this.raw.to - 1);
      if (rangeTo == null) {
        return false;
      }
      if (!this.canCrossRanges() && rangeFrom !== rangeTo) {
        return false;
      }
      return true;
    };

    Item.prototype.renderDragHint = function(drag) {
      var ref, ref1;
      return ((ref = (ref1 = this.raw.renderDragHint) != null ? ref1 : this.cfg().item.renderDragHint) != null ? ref : this.constructor.renderDragHint).call(this, drag);
    };

    Item.renderDragHint = function(drag) {
      var time;
      time = this.timeline.approxTime(this.timeline.getTime(drag.ui.position.left));
      if (time != null) {
        return this.$dragHint.text(moment.unix(time).format('DD.MM.YYYY HH:mm:ss'));
      }
    };

    Item.prototype.placeDragHint = function(drag) {
      var ref, ref1;
      return ((ref = (ref1 = this.raw.placeDragHint) != null ? ref1 : this.cfg().item.placeDragHint) != null ? ref : this.constructor.placeDragHint).call(this, drag);
    };

    Item.placeDragHint = function(drag) {
      return this.$dragHint.css({
        left: drag.event.pageX - drag.parentOffset.left,
        top: drag.event.pageY - drag.parentOffset.top
      });
    };

    return Item;

  })(Timeline.Element);

  window.Timeline = Timeline;

}).call(this);
