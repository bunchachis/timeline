// Generated by CoffeeScript 1.8.0
(function() {
  var Registry, TL,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.TL = TL = {};

  TL.mixOf = function() {
    var Mixed, mixins;
    mixins = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    Mixed = (function() {
      var Mixin, method, name, _i, _ref;

      Mixed.mixinInitters = [];

      Mixed.mixinDeinitters = [];

      function Mixed() {
        this.initMixins();
      }

      Mixed.prototype.destructor = function() {
        return this.deinitMixins();
      };

      Mixed.prototype.initMixins = function() {
        var initter, _i, _len, _ref;
        _ref = this.constructor.mixinInitters;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          initter = _ref[_i];
          initter.call(this);
        }
        return null;
      };

      Mixed.prototype.deinitMixins = function() {
        var deinitter, _i, _len, _ref;
        _ref = this.constructor.mixinDeinitters;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          deinitter = _ref[_i];
          deinitter.call(this);
        }
        return null;
      };

      for (_i = mixins.length - 1; _i >= 0; _i += -1) {
        Mixin = mixins[_i];
        _ref = Mixin.prototype;
        for (name in _ref) {
          method = _ref[name];
          switch (name) {
            case 'init':
              Mixed.mixinInitters.push(method);
              break;
            case 'deinit':
              Mixed.mixinDeinitters.push(method);
              break;
            default:
              Mixed.prototype[name] = method;
          }
        }
      }

      return Mixed;

    })();
    return Mixed;
  };

  TL.Resource = (function() {
    function Resource() {}

    Resource.prototype.construct = function(destroy) {
      this.destroy = destroy;
      return this.holdLevel = 0;
    };

    Resource.prototype.hold = function() {
      return this.holdLevel++;
    };

    Resource.prototype.release = function() {
      if (--this.holdLevel === 0) {
        this.destroy();
      }
      return this.destroy = void 0;
    };

    return Resource;

  })();

  TL.ResourceHolder = (function() {
    function ResourceHolder() {}

    ResourceHolder.prototype.holdResource = function(resource) {
      if (this.heldResources == null) {
        this.heldResources = [];
      }
      resource.hold();
      return this.heldResources.push(resource);
    };

    ResourceHolder.prototype.releaseResources = function() {
      var resource, _i, _len, _ref;
      if (this.heldResources != null) {
        _ref = this.heldResources;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          resource = _ref[_i];
          resource.release();
        }
        return this.heldResources = [];
      }
    };

    return ResourceHolder;

  })();

  TL.EventEmitter = (function() {
    function EventEmitter() {}

    EventEmitter.prototype.listenEvent = function(name, fn) {
      var index, _base;
      if (this.eventListeners == null) {
        this.eventListeners = {};
      }
      if ((_base = this.eventListeners)[name] == null) {
        _base[name] = {
          lastId: 0,
          funcs: []
        };
      }
      index = this.eventListeners[name].lastId++;
      this.eventListeners[name].funcs[index] = fn;
      return new TL.Resource((function(_this) {
        return function() {
          return _this.unlisten(name, index);
        };
      })(this));
    };

    EventEmitter.prototype.unlistenEvent = function(name, fnOrIndex) {
      var fn, index, listeners, _ref, _results;
      if (this.eventListeners == null) {
        this.eventListeners = {};
      }
      listeners = this.eventListeners[name];
      if (listeners != null) {
        if (typeof fnOrIndex === 'number') {
          return delete listeners.funcs[fnOrIndex];
        } else {
          _ref = listeners.funcs;
          _results = [];
          for (index in _ref) {
            fn = _ref[index];
            if (!(fn === fnOrIndex)) {
              continue;
            }
            delete listeners.funcs[i];
            break;
          }
          return _results;
        }
      }
    };

    EventEmitter.prototype.fireEvent = function(name, event, returnEvent) {
      var fn, index, isOk, result, _ref, _ref1;
      if (event == null) {
        event = {};
      }
      if (returnEvent == null) {
        returnEvent = false;
      }
      $.extend(event, {
        name: name,
        _isPropagationPrevented: false,
        _isCanceled: false,
        cancel: function() {
          return this._isCanceled = true;
        },
        preventPropagation: function() {
          return this._isPropagationPrevented = true;
        }
      });
      isOk = true;
      if (((_ref = this.eventListeners) != null ? _ref[name] : void 0) != null) {
        _ref1 = this.eventListeners[name].funcs;
        for (index in _ref1) {
          fn = _ref1[index];
          if (!(fn != null)) {
            continue;
          }
          if (event._isPropagationPrevented) {
            break;
          }
          result = fn.call(this, event);
          if (result === false || event._isCanceled) {
            isOk = false;
          }
        }
      }
      if (returnEvent) {
        return event;
      } else {
        return isOk;
      }
    };

    return EventEmitter;

  })();

  TL.Sized = (function() {
    function Sized() {}

    Sized.prototype.getSize = function(type, axis) {
      return this['get' + type + axis]();
    };

    Sized.prototype.calcSize = function(axis) {
      var child, innerSpace, isString, parent, parts, percents, remainingSpace, sibling, siblingVerb, siblings, totalParts, verb, _i, _len;
      verb = this['getRaw' + axis]();
      isString = $.type(verb) === 'string';
      if (verb === 'auto') {
        return TL.Misc.sum((function() {
          var _i, _len, _ref, _results;
          _ref = this.getChildrenElements();
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            _results.push(child.getSize('Outer', axis));
          }
          return _results;
        }).call(this));
      } else if ($.type(verb) === 'number') {
        return verb;
      } else if (isString && verb.indexOf('px') > -1) {
        return parseInt(verb);
      } else if (isString && verb.indexOf('%') > -1) {
        percents = parseInt(verb);
        parent = this.getParentElement();
        innerSpace = parent != null ? parent.getSize('Inner', axis) : 0;
        return Math.round(innerSpace * percents / 100) - this.getExtraOffsetBefore() - this.getExtraOffsetAfter();
      } else if (isString && verb.indexOf('part') > -1) {
        parts = parseInt(verb);
        totalParts = 0;
        parent = this.getParentElement();
        remainingSpace = parent != null ? parent.getSize('Inner', axis) : 0;
        if (parent != null) {
          siblings = parent.getChildrenElements();
          for (_i = 0, _len = siblings.length; _i < _len; _i++) {
            sibling = siblings[_i];
            siblingVerb = sibling.getSize('Raw', axis);
            if ($.type(siblingVerb) === 'string' && siblingVerb.indexOf('part') > -1) {
              totalParts += parseInt(siblingVerb);
            } else {
              remainingSpace -= sibling.getSize('Outer', axis);
            }
          }
        }
        return Math.round(remainingSpace * parts / totalParts) - this.getExtraOffsetBefore() - this.getExtraOffsetAfter();
      }
    };

    Sized.prototype.getParentElement = function() {};

    Sized.prototype.getChildrenElements = function() {
      return [];
    };

    Sized.prototype.getRawHeight = function() {
      return 'auto';
    };

    Sized.prototype.getInnerHeight = function() {
      return this.calcSize('Height');
    };

    Sized.prototype.getOuterHeight = function() {
      return this.getInnerHeight() + this.getExtraOffsetBefore() + this.getExtraOffsetAfter();
    };

    Sized.prototype.getExtraOffsetBefore = function() {
      return 0;
    };

    Sized.prototype.getExtraOffsetAfter = function() {
      return 0;
    };

    Sized.prototype.doesSizeDependOnParent = function() {
      var verb;
      verb = this.getRawHeight();
      return $.type(verb) === 'string' && (verb.indexOf('part') > -1 || verb.indexOf('%') > -1);
    };

    return Sized;

  })();

  TL.Timeline = (function(_super) {
    __extends(Timeline, _super);

    function Timeline(container, config, items) {
      var group, line, range, rawItem, rule, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3;
      if (config == null) {
        config = {};
      }
      if (items == null) {
        items = [];
      }
      this.container = new TL.Element.Container($(container), this);
      this.config = $.extend(true, this.getDefaultConfig(), config);
      this.root = this.createElement('Root');
      this.sidebar = this.createElement('Sidebar');
      this.ruler = this.createElement('Ruler');
      this.corner = this.createElement('Corner');
      this.field = this.createElement('Field');
      this.groups = [];
      this.ranges = [];
      this.lines = [];
      this.dashRules = [];
      this.dashes = [];
      this.items = [];
      _ref = this.config.groups;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        group = _ref[_i];
        this.rawAddGroup(group);
      }
      this.sortGroups();
      _ref1 = this.config.ranges;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        range = _ref1[_j];
        this.rawAddRange(range);
      }
      this.sortRanges();
      _ref2 = this.config.lines;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        line = _ref2[_k];
        this.rawAddLine(line);
      }
      this.sortLines();
      _ref3 = this.config.dashRules;
      for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
        rule = _ref3[_l];
        this.rawAddDashRule(rule);
      }
      this.sortDashRules();
      for (_m = 0, _len4 = items.length; _m < _len4; _m++) {
        rawItem = items[_m];
        this.rawAddItem(this.createItem(rawItem));
      }
      this.checkVerticalFitting();
      this.now = this.createElement('Now');
      this.icm = new TL.InteractiveCreationMode(this);
      this.render();
    }

    Timeline.prototype.render = function() {
      var dash, group, item, line, range, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3, _ref4;
      if (this.fireEvent('render')) {
        this.root.render();
        this.sidebar.render();
        this.ruler.render();
        this.corner.render();
        this.field.render();
        _ref = this.groups;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          group = _ref[_i];
          group.render();
        }
        _ref1 = this.ranges;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          range = _ref1[_j];
          range.render();
        }
        _ref2 = this.lines;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          line = _ref2[_k];
          line.render();
        }
        _ref3 = this.dashes;
        for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
          dash = _ref3[_l];
          dash.render();
        }
        _ref4 = this.items;
        for (_m = 0, _len4 = _ref4.length; _m < _len4; _m++) {
          item = _ref4[_m];
          item.render();
        }
        this.now.render();
        return this.icm.render();
      }
    };

    Timeline.prototype.warn = function(message) {
      if (this.config.isStrict) {
        throw new Error(message);
      } else {
        return typeof console !== "undefined" && console !== null ? typeof console.error === "function" ? console.error(message) : void 0 : void 0;
      }
    };

    Timeline.prototype.createElement = function(type, data) {
      var _ref;
      if (data == null) {
        data = {};
      }
      return ((_ref = this.config.fillAtSidebar) != null ? _ref : this.constructor.createElement).call(this, type, data);
    };

    Timeline.createElement = function(type, data) {
      if (data == null) {
        data = {};
      }
      return new TL.Element[type](this, data);
    };

    Timeline.prototype.rawAddRange = function(range) {
      var elseRange, _i, _len, _ref;
      _ref = this.ranges;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        elseRange = _ref[_i];
        if (range.from < elseRange.raw.to && range.to > elseRange.raw.from) {
          this.warn('Can\'t add range overlapping existing one');
          return;
        }
      }
      return this.ranges.push(this.createElement('Range', range));
    };

    Timeline.prototype.sortRanges = function() {
      return this.ranges = this.ranges.sort(function(a, b) {
        return a.raw.from - b.raw.from;
      });
    };

    Timeline.prototype.rawAddGroup = function(group) {
      var elseGroup, _i, _len, _ref;
      _ref = this.groups;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        elseGroup = _ref[_i];
        if (elseGroup.raw.id === group.id) {
          this.warn('Can\'t add group with same id as existing one has');
          return;
        }
      }
      return this.groups.push(this.createElement('Group', group));
    };

    Timeline.prototype.sortGroups = function() {
      return this.groups = this.groups.sort(function(a, b) {
        var _ref, _ref1;
        return ((_ref = a.raw.order) != null ? _ref : 0) - ((_ref1 = b.raw.order) != null ? _ref1 : 0);
      });
    };

    Timeline.prototype.rawAddLine = function(line) {
      var elseLine, _i, _len, _ref;
      _ref = this.lines;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        elseLine = _ref[_i];
        if (elseLine.raw.id === line.id) {
          this.warn('Can\'t add line with same id as existing one has');
          return;
        }
      }
      return this.lines.push(this.createElement('Line', line));
    };

    Timeline.prototype.sortLines = function() {
      return this.lines = this.lines.sort(function(a, b) {
        var _ref, _ref1;
        return ((_ref = a.raw.order) != null ? _ref : 0) - ((_ref1 = b.raw.order) != null ? _ref1 : 0);
      });
    };

    Timeline.prototype.rawAddDashRule = function(rule) {
      var elseRule, _i, _len, _ref;
      _ref = this.dashRules;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        elseRule = _ref[_i];
        if (elseRule.raw.id === rule.id) {
          this.warn('Can\'t add dash rule with same id as existing one has');
          return;
        }
      }
      return this.dashRules.push(this.createElement('DashRule', rule));
    };

    Timeline.prototype.sortDashRules = function() {
      return this.dashRules = this.dashRules.sort(function(a, b) {
        var _ref, _ref1;
        return ((_ref = a.order) != null ? _ref : 0) - ((_ref1 = b.order) != null ? _ref1 : 0);
      });
    };

    Timeline.prototype.createItem = function(raw) {
      var item;
      return item = this.createElement('Item', raw);
    };

    Timeline.prototype.rawAddItem = function(item) {
      if (!item.isValid()) {
        this.warn('Can\'t add item due to its invalidity');
        return;
      }
      return this.items.push(item);
    };

    Timeline.prototype.addItem = function(item) {
      if (this.fireEvent('item:create', {
        item: item
      })) {
        this.rawAddItem(item);
        item.render();
        return true;
      } else {
        return false;
      }
    };

    Timeline.prototype.getDefaultConfig = function() {
      return {
        field: {
          fill: null,
          place: null
        },
        corner: {
          fill: null,
          place: null
        },
        ruler: {
          isVisible: true,
          position: 'top',
          height: 50,
          fill: null,
          place: null
        },
        sidebar: {
          isVisible: true,
          position: 'left',
          width: 100,
          fill: null,
          place: null
        },
        range: {
          extraOffsetBefore: null,
          extraOffsetAfter: null,
          fill: null,
          place: null,
          fillAtRuler: null,
          placeAtRuler: null
        },
        group: {
          height: 'auto',
          extraOffsetBefore: null,
          extraOffsetAfter: null,
          fill: null,
          place: null
        },
        line: {
          height: 50,
          extraOffsetBefore: null,
          extraOffsetAfter: null,
          fill: null,
          place: null,
          fillAtSidebar: null,
          placeAtSidebar: null
        },
        item: {
          isDraggable: true,
          isResizable: true,
          canCrossRanges: true,
          fill: null,
          place: null,
          isValid: null
        },
        dash: {
          fill: null,
          place: null
        },
        scale: 1,
        timezone: 'UTC',
        snapResolution: 1,
        height: '100%',
        createElement: null,
        dashRules: [],
        ranges: [],
        groups: [],
        lines: [],
        isStrict: false,
        scrollPointPosition: .1
      };
    };

    Timeline.prototype.getGroupById = function(groupId) {
      var group, _i, _len, _ref;
      if (groupId != null) {
        _ref = this.groups;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          group = _ref[_i];
          if (group.raw.id === groupId) {
            return group;
          }
        }
      }
    };

    Timeline.prototype.getRangeByTime = function(time) {
      var range, _i, _len, _ref;
      _ref = this.ranges;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        range = _ref[_i];
        if ((range.raw.from <= time && time < range.raw.to)) {
          return range;
        }
      }
    };

    Timeline.prototype.getRangeByOffset = function(offset) {
      var range, rangeEnd, rangeStart, _i, _len, _ref;
      _ref = this.ranges;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        range = _ref[_i];
        rangeStart = range.getOffset() + range.getInternalOffset(range.raw.from);
        rangeEnd = rangeStart + range.getInnerWidth();
        if ((rangeStart <= offset && offset < rangeEnd)) {
          return range;
        }
      }
    };

    Timeline.prototype.getLineById = function(lineId) {
      var line, _i, _len, _ref;
      _ref = this.lines;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        if (line.raw.id === lineId) {
          return line;
        }
      }
    };

    Timeline.prototype.getLineByVerticalOffset = function(group, verticalOffset) {
      var line, lineEnd, lineStart, _i, _len, _ref;
      _ref = group.getLines();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        lineStart = line.getVerticalOffset() + line.getInternalVerticalOffset();
        lineEnd = lineStart + line.getInnerHeight();
        if ((lineStart <= verticalOffset && verticalOffset < lineEnd)) {
          return line;
        }
      }
    };

    Timeline.prototype.getDashRuleById = function(ruleId) {
      var rule, _i, _len, _ref;
      _ref = this.dashRules;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        rule = _ref[_i];
        if (rule.raw.id === ruleId) {
          return rule;
        }
      }
    };

    Timeline.prototype.getTime = function(offset) {
      var range;
      range = this.getRangeByOffset(offset);
      if (range != null) {
        return range.getTimeByOffset(offset);
      }
    };

    Timeline.prototype.getOffset = function(time) {
      var range;
      if (time != null) {
        range = this.getRangeByTime(time);
        if (range != null) {
          return range.getOffset() + range.getInternalOffset(time);
        }
      }
    };

    Timeline.prototype.approxTime = function(time, allowPostRange) {
      var approxed, resolution;
      if (allowPostRange == null) {
        allowPostRange = false;
      }
      if (time != null) {
        resolution = this.config.snapResolution;
        approxed = Math.round(time / resolution) * resolution;
        if ((allowPostRange && this.getRangeByTime(approxed - 1)) || this.getRangeByTime(approxed)) {
          return approxed;
        } else {
          approxed = Math.ceil(time / resolution) * resolution;
          if (this.getRangeByTime(approxed)) {
            return approxed;
          } else {
            approxed = Math.floor(time / resolution) * resolution;
            if (this.getRangeByTime(approxed)) {
              return approxed;
            }
          }
        }
      }
    };

    Timeline.prototype.checkVerticalFitting = function() {
      var group, _i, _len, _ref, _results;
      if (this.root.getRawHeight() === 'auto') {
        if (this.ruler.doesSizeDependOnParent()) {
          throw 'In timeline auto-height mode the ruler size must not be specified in parts of remaining space';
        }
        _ref = this.groups;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          group = _ref[_i];
          if (group.doesSizeDependOnParent()) {
            throw 'In timeline auto-height mode there must not be groups with size specified in parts of remaining space';
          }
        }
        return _results;
      }
    };

    Timeline.prototype.scrollToTime = function(time) {
      var offset, range, rangeBeforeTime, viewWidth, _i, _len, _ref;
      if (time == null) {
        time = this.getCurrentTime();
      }
      offset = this.getOffset(time);
      console.log("Preoffset: " + offset);
      if (offset == null) {
        _ref = this.ranges;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          range = _ref[_i];
          if (range.raw.to <= time) {
            rangeBeforeTime = range;
          }
        }
        offset = rangeBeforeTime != null ? rangeBeforeTime.getOffset() + rangeBeforeTime.getOuterWidth() - 1 : 0;
      }
      console.log(rangeBeforeTime);
      console.log("Postoffset: " + offset);
      viewWidth = this.field.getView().$dom.width();
      offset = offset - viewWidth * this.config.scrollPointPosition;
      if (offset < 0) {
        offset = 'left';
      }
      console.log("Final offset: " + offset);
      return this.ruler.getView().$dom.mCustomScrollbar('scrollTo', {
        x: offset
      });
    };

    Timeline.prototype.getCurrentTime = function() {
      var nowString;
      nowString = moment().format('DD.MM.YYYY HH:mm:ss');
      return moment.tz(nowString, 'DD.MM.YYYY HH:mm:ss', this.config.timezone).unix();
    };

    return Timeline;

  })(TL.EventEmitter);

  TL.InteractiveCreationMode = (function() {
    function InteractiveCreationMode(timeline) {
      this.timeline = timeline;
      this.isActive = false;
      this.escHandler = (function(_this) {
        return function(e) {
          if (e.which === 27) {
            return _this.deactivate();
          }
        };
      })(this);
      this.build();
    }

    InteractiveCreationMode.prototype.build = function() {
      var $dash, $helper, group, _i, _len, _ref;
      this.$helpers = [];
      this.$dashes = [];
      _ref = this.timeline.groups;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        group = _ref[_i];
        $dash = TL.Misc.addDom('icm-dash', group.getView().$dom);
        this.$dashes.push($dash);
        $helper = TL.Misc.addDom('icm-helper', group.getView().$dom);
        this.$helpers.push($helper);
      }
      this.$hint = TL.Misc.addDom('icm-hint');
      this.$indicator = TL.Misc.addDom('icm-indicator');
      this.$indicator.append($('<p />').text('Создание элемента'));
      return this.$indicator.append($('<button />').text('отменить').click((function(_this) {
        return function() {
          return _this.deactivate();
        };
      })(this)));
    };

    InteractiveCreationMode.prototype.render = function() {
      this.placeDashes();
      return this.placeHelpers();
    };

    InteractiveCreationMode.prototype.activate = function(itemTemplate, restrictGroupsIds) {
      this.itemTemplate = itemTemplate != null ? itemTemplate : {};
      this.restrictGroupsIds = restrictGroupsIds;
      this.isActive = true;
      this.$oldCornerContent = this.timeline.corner.getView().$dom.children();
      this.timeline.corner.getView().$dom.empty().append(this.$indicator);
      $(window).on('keydown', this.escHandler);
      return this.activateState('SetBeginning');
    };

    InteractiveCreationMode.prototype.deactivate = function() {
      this.isActive = false;
      this.$indicator.detach();
      this.timeline.corner.getView().$dom.empty().append(this.$oldCornerContent);
      this.$oldCornerContent = null;
      $(window).off('keydown', this.escHandler);
      this.itemTemplate = null;
      this.from = null;
      this.to = null;
      this.line = null;
      this.restrictGroupsIds = null;
      return this.deactivateState(this.stateName);
    };

    InteractiveCreationMode.prototype.activateState = function(stateName) {
      this.deactivateState(this.stateName);
      this.stateName = stateName;
      return this['activateState' + this.stateName]();
    };

    InteractiveCreationMode.prototype.deactivateState = function(stateName) {
      if (stateName != null) {
        this['deactivateState' + stateName]();
      }
      return this.stateName = null;
    };

    InteractiveCreationMode.prototype.activateStateSetBeginning = function() {
      var fieldOffset;
      fieldOffset = TL.Misc.getScrollContainer(this.timeline.field.getView().$dom).offset();
      this.moveHandler = (function(_this) {
        return function(e) {
          var group, groupOffset, mouseInfo, _ref;
          group = $(e.target).parents('.tl-group').data('timeline-host-object');
          mouseInfo = {
            event: e
          };
          if ((group != null) && ((_this.restrictGroupsIds == null) || (_ref = group.raw.id, __indexOf.call(_this.restrictGroupsIds, _ref) >= 0))) {
            groupOffset = TL.Misc.getScrollContainer(group.getView().$dom).offset();
            mouseInfo.group = group;
            mouseInfo.parentOffset = groupOffset;
            _this.line = _this.timeline.getLineByVerticalOffset(group, e.pageY - groupOffset.top);
            _this.from = _this.timeline.approxTime(_this.timeline.getTime(e.pageX - groupOffset.left));
          } else {
            _this.line = null;
            _this.from = null;
          }
          _this.render();
          return _this.renderHint(mouseInfo);
        };
      })(this);
      this.timeline.field.getView().$dom.on('mousemove', this.moveHandler);
      this.leaveHandler = (function(_this) {
        return function(e) {
          _this.line = null;
          _this.from = null;
          _this.render();
          return _this.renderHint({});
        };
      })(this);
      this.timeline.field.getView().$dom.on('mouseleave', this.leaveHandler);
      this.clickHandler = (function(_this) {
        return function(e) {
          if (_this.from != null) {
            return _this.activateState('SetEnding');
          }
        };
      })(this);
      return this.timeline.field.getView().$dom.on('click', this.clickHandler);
    };

    InteractiveCreationMode.prototype.deactivateStateSetBeginning = function() {
      this.render();
      this.renderHint({});
      this.timeline.field.getView().$dom.off('mousemove', this.moveHandler);
      this.moveHandler = null;
      this.timeline.field.getView().$dom.off('mouseleave', this.leaveHandler);
      this.leaveHandler = null;
      this.timeline.field.getView().$dom.off('click', this.clickHandler);
      return this.clickHandler = null;
    };

    InteractiveCreationMode.prototype.activateStateSetEnding = function() {
      var fieldOffset;
      fieldOffset = TL.Misc.getScrollContainer(this.timeline.field.getView().$dom).offset();
      this.moveHandler = (function(_this) {
        return function(e) {
          var group, groupOffset, mouseInfo, mouseTime;
          group = $(e.target).parents('.tl-group').data('timeline-host-object');
          mouseInfo = {
            event: e
          };
          if (group != null) {
            groupOffset = TL.Misc.getScrollContainer(group.getView().$dom).offset();
            mouseInfo.group = group;
            mouseInfo.parentOffset = groupOffset;
            mouseTime = _this.timeline.getTime(e.pageX - groupOffset.left);
            _this.to = _this.timeline.approxTime(mouseTime, true);
          } else {
            _this.to = null;
          }
          _this.render();
          return _this.renderHint(mouseInfo);
        };
      })(this);
      this.timeline.field.getView().$dom.on('mousemove', this.moveHandler);
      this.leaveHandler = (function(_this) {
        return function(e) {
          _this.to = null;
          _this.render();
          return _this.renderHint({});
        };
      })(this);
      this.timeline.field.getView().$dom.on('mouseleave', this.leaveHandler);
      this.clickHandler = (function(_this) {
        return function(e) {
          var item;
          if (_this.to != null) {
            item = _this.timeline.createItem($.extend(_this.itemTemplate, {
              from: _this.from,
              to: _this.to,
              lineId: _this.line.raw.id
            }));
            if (item.isValid()) {
              if (_this.timeline.addItem(item)) {
                return _this.deactivate();
              }
            }
          }
        };
      })(this);
      return this.timeline.field.getView().$dom.on('click', this.clickHandler);
    };

    InteractiveCreationMode.prototype.deactivateStateSetEnding = function() {
      this.render();
      this.renderHint({});
      this.timeline.field.getView().$dom.off('mousemove', this.moveHandler);
      this.moveHandler = null;
      this.timeline.field.getView().$dom.off('mouseleave', this.leaveHandler);
      this.leaveHandler = null;
      this.timeline.field.getView().$dom.off('click', this.clickHandler);
      return this.clickHandler = null;
    };

    InteractiveCreationMode.prototype.placeDashes = function() {
      var $dash, _i, _len, _ref, _results;
      _ref = this.$dashes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        $dash = _ref[_i];
        _results.push(this.placeDash($dash));
      }
      return _results;
    };

    InteractiveCreationMode.prototype.placeDash = function($dash) {
      var offset;
      offset = this.timeline.getOffset((function() {
        switch (this.stateName) {
          case 'SetBeginning':
            return this.from;
          case 'SetEnding':
            return this.to - 1;
        }
      }).call(this));
      if (this.isActive && (offset != null)) {
        return $dash.css({
          display: 'block',
          left: offset
        });
      } else {
        return $dash.css({
          display: 'none'
        });
      }
    };

    InteractiveCreationMode.prototype.placeHelpers = function() {
      var $helper, _i, _len, _ref, _results;
      _ref = this.$helpers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        $helper = _ref[_i];
        _results.push(this.placeHelper($helper));
      }
      return _results;
    };

    InteractiveCreationMode.prototype.placeHelper = function($helper) {
      var group, offset, width, _ref;
      group = $helper.parents('.tl-group').data('timeline-host-object');
      if (group === ((_ref = this.line) != null ? _ref.getGroup() : void 0)) {
        switch (this.stateName) {
          case 'SetBeginning':
            offset = this.timeline.getOffset(this.from);
            width = '';
            break;
          case 'SetEnding':
            offset = this.timeline.getOffset(this.from);
            width = this.to != null ? this.timeline.getOffset(this.to - 1) - offset : null;
        }
      }
      if (this.isActive && (this.line != null) && (offset != null) && (width != null)) {
        return $helper.css({
          display: 'block',
          left: offset,
          width: width,
          top: this.line.getVerticalOffset() + this.line.getInternalVerticalOffset(),
          height: this.line.getInnerHeight()
        });
      } else {
        return $helper.css({
          display: 'none'
        });
      }
    };

    InteractiveCreationMode.prototype.renderHint = function(mouseInfo) {
      this.fillHint(mouseInfo);
      return this.placeHint(mouseInfo);
    };

    InteractiveCreationMode.prototype.fillHint = function(mouseInfo) {
      var _ref, _ref1;
      return ((_ref = (_ref1 = this.timeline.config.icm) != null ? _ref1.fillHint : void 0) != null ? _ref : this.constructor.fillHint).call(this, mouseInfo);
    };

    InteractiveCreationMode.fillHint = function(mouseInfo) {
      var offset, time;
      if (this.isActive && (mouseInfo.group != null)) {
        offset = mouseInfo.event.pageX - mouseInfo.parentOffset.left;
        time = this.timeline.approxTime(this.timeline.getTime(offset), this.stateName === 'SetEnding');
        if (time != null) {
          return this.$hint.text(moment.unix(time).tz(this.timeline.config.timezone).format('DD.MM.YYYY HH:mm:ss'));
        }
      } else {
        return this.$hint.empty();
      }
    };

    InteractiveCreationMode.prototype.placeHint = function(mouseInfo) {
      var _ref, _ref1;
      return ((_ref = (_ref1 = this.timeline.config.icm) != null ? _ref1.placeHint : void 0) != null ? _ref : this.constructor.placeHint).call(this, mouseInfo);
    };

    InteractiveCreationMode.placeHint = function(mouseInfo) {
      if (this.isActive && (mouseInfo.group != null)) {
        this.$hint.appendTo(TL.Misc.getScrollContainer(mouseInfo.group.getView().$dom));
        return this.$hint.css({
          left: mouseInfo.event.pageX - mouseInfo.parentOffset.left,
          top: mouseInfo.event.pageY - mouseInfo.parentOffset.top
        });
      } else {
        return this.$hint.detach();
      }
    };

    return InteractiveCreationMode;

  })();

  TL.Misc = (function() {
    function Misc() {}

    Misc.addDom = function(name, $container) {
      var $element;
      $element = $('<div />').addClass("tl-" + name);
      if ($container) {
        $element.appendTo(this.getScrollContainer($container));
      }
      return $element;
    };

    Misc.scrollize = function($element, axis, pairs) {
      var $inner, config;
      if (pairs == null) {
        pairs = [];
      }
      $inner = this.addDom('scroll-inner', $element);
      $element.data('scroll-inner', $inner);
      config = {
        theme: 'dark-2',
        autoHideScrollbar: true,
        axis: axis,
        scrollInertia: 0,
        mouseWheel: {
          scrollAmount: 30
        },
        callbacks: {}
      };
      if (axis === 'xy') {
        config.mouseWheel.axis = 'x';
      }
      if (pairs.length) {
        config.callbacks.whileScrolling = function() {
          var $targets, pair, position, _i, _len, _results;
          _results = [];
          for (_i = 0, _len = pairs.length; _i < _len; _i++) {
            pair = pairs[_i];
            $targets = pair.getTarget();
            if ($targets != null ? $targets.length : void 0) {
              position = {};
              if (pair.axis.indexOf('x') > -1) {
                position.x = this.mcs.left + 'px';
              }
              if (pair.axis.indexOf('y') > -1) {
                position.y = this.mcs.top + 'px';
              }
              _results.push($.each($targets, function() {
                return $(this).mCustomScrollbar('scrollTo', position, {
                  scrollInertia: 0,
                  timeout: 0,
                  callbacks: false
                });
              }));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };
      }
      return $element.mCustomScrollbar(config);
    };

    Misc.getScrollContainer = function($element) {
      var $inner;
      $inner = $element.data('scroll-inner');
      if ($inner != null ? $inner.length : void 0) {
        return $inner;
      } else {
        return $element;
      }
    };

    Misc.setInnerSize = function($element, size) {
      var css;
      css = {};
      if (size.x) {
        css.width = size.x;
      }
      if (size.y) {
        css.height = size.y;
      }
      this.getScrollContainer($element).css(css);
      return $element.mCustomScrollbar('update');
    };

    Misc.sum = function(array) {
      var sum, value, _i, _len;
      sum = 0;
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        value = array[_i];
        sum += value;
      }
      return sum;
    };

    Misc.ucFirst = function(string) {
      return string.charAt(0).toUpperCase() + string.slice(1);
    };

    return Misc;

  })();

  TL.registry = new (Registry = (function() {
    function Registry() {
      this.map = {};
      this.lastOid = -1;
    }

    Registry.prototype.generateOid = function() {
      return ++this.lastOid;
    };

    Registry.prototype.get = function(oid) {
      return this.map[oid];
    };

    Registry.prototype.register = function(object) {
      if (object.oid == null) {
        object.oid = this.generateOid();
        this.map[object.oid] = object;
      }
      return object.oid;
    };

    Registry.prototype.unregister = function(oid) {
      if (this.map[oid] != null) {
        return delete this.map[oid];
      }
    };

    return Registry;

  })());

  TL.Registrable = (function() {
    function Registrable() {}

    Registrable.prototype.getOid = function() {
      return this.oid;
    };

    Registrable.prototype.init = function() {
      return TL.registry.register(this);
    };

    Registrable.prototype.deinit = function() {
      return TL.registry.unregister(this.oid);
    };

    return Registrable;

  })();

  TL.MultiViewed = (function() {
    function MultiViewed() {}

    MultiViewed.prototype.init = function() {
      this.views = {};
      return this.createViews();
    };

    MultiViewed.prototype.deinit = function() {
      var name, view, _ref;
      _ref = this.views;
      for (name in _ref) {
        view = _ref[name];
        view.$dom.remove();
        delete view.$dom;
      }
      return delete this.views;
    };

    MultiViewed.prototype.createViews = function() {
      return this.createView();
    };

    MultiViewed.prototype.createView = function(type, parent, namePostfix) {
      var name;
      if (type == null) {
        type = 'default';
      }
      name = type + (namePostfix ? ':' + namePostfix : '');
      return this.views[name] = {
        type: type,
        parent: parent,
        $dom: this.createViewDom(parent, type)
      };
    };

    MultiViewed.prototype.createViewDom = function() {
      return $('<div />');
    };

    MultiViewed.prototype.getView = function(name) {
      if (name == null) {
        name = 'default';
      }
      return this.views[name];
    };

    MultiViewed.prototype.render = function() {
      var name, view, _ref, _results;
      _ref = this.views;
      _results = [];
      for (name in _ref) {
        view = _ref[name];
        _results.push(this['render' + TL.Misc.ucFirst(view.type)].call(this, view));
      }
      return _results;
    };

    return MultiViewed;

  })();

  TL.Element = (function(_super) {
    __extends(Element, _super);

    function Element(timeline, raw) {
      this.timeline = timeline;
      this.raw = raw != null ? raw : {};
      this.className = this.getClassName();
      Element.__super__.constructor.call(this);
      this.init();
    }

    Element.prototype.init = function() {};

    Element.prototype.getClassName = function() {
      return this.constructor.name.toLowerCase();
    };

    Element.prototype.cfg = function() {
      var _ref;
      return (_ref = this.timeline.config[this.className]) != null ? _ref : {};
    };

    Element.prototype.getRawHeight = function() {
      return this.lookupProperty('height', 'auto');
    };

    Element.prototype.getExtraOffsetBefore = function() {
      return this.lookupProperty('extraOffsetBefore', 0);
    };

    Element.prototype.getExtraOffsetAfter = function() {
      return this.lookupProperty('extraOffsetAfter', 0);
    };

    Element.prototype.lookupProperty = function(name, fallbackValue) {
      var _ref, _ref1, _ref2;
      return (_ref = (_ref1 = (_ref2 = this.raw[name]) != null ? _ref2 : this.cfg()[name]) != null ? _ref1 : this.constructor[name]) != null ? _ref : fallbackValue;
    };

    return Element;

  })(TL.mixOf(TL.Sized, TL.Registrable, TL.MultiViewed, TL.ResourceHolder));

  TL.Element.Container = (function(_super) {
    __extends(Container, _super);

    function Container($dom, timeline) {
      this.$dom = $dom;
      this.timeline = timeline;
    }

    Container.prototype.getRawHeight = function() {
      return 0;
    };

    Container.prototype.getInnerHeight = function() {
      return this.$dom.innerHeight();
    };

    Container.prototype.getChildrenElements = function() {
      return [this.timeline];
    };

    Container.prototype.getView = function() {
      return {
        type: 'default',
        $dom: this.$dom
      };
    };

    return Container;

  })(TL.Sized);

  TL.Element.Root = (function(_super) {
    __extends(Root, _super);

    function Root() {
      return Root.__super__.constructor.apply(this, arguments);
    }

    Root.prototype.getClassName = function() {
      return 'root';
    };

    Root.prototype.createViews = function() {
      return this.createView('default', this.timeline.container.getView());
    };

    Root.prototype.createViewDom = function(parent) {
      return TL.Misc.addDom('root', parent.$dom);
    };

    Root.prototype.renderDefault = function(view) {
      this.fillDefault(view);
      return this.placeDefault(view);
    };

    Root.prototype.fillDefault = function(view) {};

    Root.prototype.placeDefault = function(view) {
      return view.$dom.css({
        height: this.getInnerHeight()
      });
    };

    Root.prototype.getParentElement = function() {
      return this.timeline.container;
    };

    Root.prototype.getChildrenElements = function() {
      return this.timeline.groups.concat([this.timeline.ruler]);
    };

    Root.prototype.getRawHeight = function() {
      var _ref;
      return (_ref = this.timeline.config.height) != null ? _ref : 'auto';
    };

    return Root;

  })(TL.Element);

  TL.Element.Sidebar = (function(_super) {
    __extends(Sidebar, _super);

    function Sidebar() {
      return Sidebar.__super__.constructor.apply(this, arguments);
    }

    Sidebar.prototype.getClassName = function() {
      return 'sidebar';
    };

    Sidebar.prototype.isVisible = function() {
      return this.lookupProperty('isVisible', true);
    };

    Sidebar.prototype.getOuterWidth = function() {
      if (this.isVisible()) {
        return this.getInnerWidth();
      } else {
        return 0;
      }
    };

    Sidebar.prototype.getInnerWidth = function() {
      if (this.isVisible()) {
        return this.lookupProperty('width', 100);
      } else {
        return 0;
      }
    };

    Sidebar.prototype.createViews = function() {
      return this.createView('default', this.timeline.root.getView());
    };

    Sidebar.prototype.createViewDom = function(parent) {
      return TL.Misc.addDom('sidebar', parent.$dom);
    };

    Sidebar.prototype.renderDefault = function(view) {
      this.fillDefault(view);
      return this.placeDefault(view);
    };

    Sidebar.prototype.fillDefault = function(view) {
      return this.lookupProperty('fillDefault').call(this, view);
    };

    Sidebar.fillDefault = function(view) {};

    Sidebar.prototype.placeDefault = function(view) {
      return this.lookupProperty('placeDefault').call(this, view);
    };

    Sidebar.placeDefault = function(view) {
      view.$dom.css(this.timeline.config.ruler.position === 'top' ? {
        top: this.timeline.ruler.getOuterHeight(),
        bottom: 0
      } : {
        top: 0,
        bottom: this.timeline.ruler.getOuterHeight()
      });
      view.$dom.css(this.cfg().position === 'left' ? {
        left: 0,
        right: 'auto'
      } : {
        left: 'auto',
        right: 0
      });
      return view.$dom.css({
        width: this.getInnerWidth()
      });
    };

    return Sidebar;

  })(TL.Element);

  TL.Element.Ruler = (function(_super) {
    __extends(Ruler, _super);

    function Ruler() {
      return Ruler.__super__.constructor.apply(this, arguments);
    }

    Ruler.prototype.getClassName = function() {
      return 'ruler';
    };

    Ruler.prototype.isVisible = function() {
      return this.lookupProperty('isVisible', true);
    };

    Ruler.prototype.getRawHeight = function() {
      if (this.isVisible()) {
        return Ruler.__super__.getRawHeight.call(this);
      } else {
        return 0;
      }
    };

    Ruler.prototype.getExtraOffsetBefore = function() {
      if (this.isVisible()) {
        return Ruler.__super__.getExtraOffsetBefore.call(this);
      } else {
        return 0;
      }
    };

    Ruler.prototype.getExtraOffsetAfter = function() {
      if (this.isVisible()) {
        return Ruler.__super__.getExtraOffsetAfter.call(this);
      } else {
        return 0;
      }
    };

    Ruler.prototype.getParentElement = function() {
      return this.timeline.root;
    };

    Ruler.prototype.createViews = function() {
      return this.createView('default', this.timeline.root.getView());
    };

    Ruler.prototype.createViewDom = function(parent) {
      var $dom;
      $dom = TL.Misc.addDom('ruler', parent.$dom);
      TL.Misc.scrollize($dom, 'x', [
        {
          axis: 'x',
          getTarget: (function(_this) {
            return function() {
              var group, _i, _len, _ref, _results;
              _ref = _this.timeline.groups;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                group = _ref[_i];
                _results.push(group.getView().$dom);
              }
              return _results;
            };
          })(this)
        }
      ]);
      return $dom;
    };

    Ruler.prototype.renderDefault = function(view) {
      this.fillDefault(view);
      return this.placeDefault(view);
    };

    Ruler.prototype.fillDefault = function(view) {
      return this.lookupProperty('fillDefault').call(this, view);
    };

    Ruler.fillDefault = function(view) {};

    Ruler.prototype.placeDefault = function(view) {
      return this.lookupProperty('placeDefault').call(this, view);
    };

    Ruler.placeDefault = function(view) {
      var range;
      view.$dom.css(this.timeline.config.sidebar.position === 'left' ? {
        left: this.timeline.sidebar.getOuterWidth(),
        right: 0
      } : {
        left: 0,
        right: this.timeline.sidebar.getOuterWidth()
      });
      view.$dom.css(this.cfg().position === 'top' ? {
        top: 0,
        bottom: 'auto'
      } : {
        top: 'auto',
        bottom: 0
      });
      view.$dom.css({
        height: this.timeline.ruler.getInnerHeight()
      });
      return TL.Misc.setInnerSize(view.$dom, {
        x: TL.Misc.sum((function() {
          var _i, _len, _ref, _results;
          _ref = this.timeline.ranges;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            range = _ref[_i];
            _results.push(range.getOuterWidth());
          }
          return _results;
        }).call(this)),
        y: this.timeline.ruler.getInnerHeight()
      });
    };

    return Ruler;

  })(TL.Element);

  TL.Element.Corner = (function(_super) {
    __extends(Corner, _super);

    function Corner() {
      return Corner.__super__.constructor.apply(this, arguments);
    }

    Corner.prototype.getClassName = function() {
      return 'corner';
    };

    Corner.prototype.createViews = function() {
      return this.createView('default', this.timeline.root.getView());
    };

    Corner.prototype.createViewDom = function(parent) {
      return TL.Misc.addDom('corner', parent.$dom);
    };

    Corner.prototype.renderDefault = function(view) {
      this.fillDefault(view);
      return this.placeDefault(view);
    };

    Corner.prototype.fillDefault = function(view) {
      return this.lookupProperty('fillDefault').call(this, view);
    };

    Corner.fillDefault = function(view) {};

    Corner.prototype.placeDefault = function(view) {
      return this.lookupProperty('placeDefault').call(this, view);
    };

    Corner.placeDefault = function(view) {
      view.$dom.css(this.timeline.config.ruler.position === 'top' ? {
        top: 0,
        bottom: ''
      } : {
        top: '',
        bottom: 0
      });
      view.$dom.css(this.timeline.config.sidebar.position === 'left' ? {
        left: 0,
        right: ''
      } : {
        left: '',
        right: 0
      });
      return view.$dom.css({
        width: this.timeline.sidebar.getOuterWidth(),
        height: this.timeline.ruler.getOuterHeight()
      });
    };

    return Corner;

  })(TL.Element);

  TL.Element.Field = (function(_super) {
    __extends(Field, _super);

    function Field() {
      return Field.__super__.constructor.apply(this, arguments);
    }

    Field.prototype.getClassName = function() {
      return 'field';
    };

    Field.prototype.createViews = function() {
      return this.createView('default', this.timeline.root.getView());
    };

    Field.prototype.createViewDom = function(parent) {
      return TL.Misc.addDom('field', parent.$dom);
    };

    Field.prototype.renderDefault = function(view) {
      this.fillDefault(view);
      return this.placeDefault(view);
    };

    Field.prototype.fillDefault = function(view) {
      return this.lookupProperty('fillDefault').call(this, view);
    };

    Field.fillDefault = function(view) {};

    Field.prototype.placeDefault = function(view) {
      return this.lookupProperty('placeDefault').call(this, view);
    };

    Field.placeDefault = function(view) {
      view.$dom.css(this.timeline.config.ruler.position === 'top' ? {
        top: this.timeline.ruler.getOuterHeight(),
        bottom: 0
      } : {
        top: 0,
        bottom: this.timeline.ruler.getOuterHeight()
      });
      return view.$dom.css(this.timeline.config.sidebar.position === 'left' ? {
        left: this.timeline.sidebar.getOuterWidth(),
        right: 0
      } : {
        left: 0,
        right: this.timeline.sidebar.getOuterWidth()
      });
    };

    return Field;

  })(TL.Element);

  TL.Element.Group = (function(_super) {
    __extends(Group, _super);

    function Group() {
      return Group.__super__.constructor.apply(this, arguments);
    }

    Group.prototype.getClassName = function() {
      return 'group';
    };

    Group.prototype.getLines = function() {
      var line, _i, _len, _ref, _results;
      _ref = this.timeline.lines;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        if (line.raw.groupId === this.raw.id) {
          _results.push(line);
        }
      }
      return _results;
    };

    Group.prototype.getVerticalOffset = function() {
      var elseGroup, x;
      return x = TL.Misc.sum((function() {
        var _i, _len, _ref, _results;
        _ref = this.timeline.groups;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          elseGroup = _ref[_i];
          if (elseGroup.raw.id === this.raw.id) {
            break;
          }
          _results.push(elseGroup.getOuterHeight());
        }
        return _results;
      }).call(this));
    };

    Group.prototype.getParentElement = function() {
      return this.timeline.root;
    };

    Group.prototype.getChildrenElements = function() {
      return this.getLines();
    };

    Group.prototype.createViews = function() {
      this.createView('default', this.timeline.field.getView());
      return this.createView('atSidebar', this.timeline.sidebar.getView());
    };

    Group.prototype.createViewDom = function(parent, type) {
      var $dom;
      $dom = TL.Misc.addDom('group', parent.$dom);
      $dom.data('timeline-host-object', this);
      switch (type) {
        case 'default':
          TL.Misc.scrollize($dom, 'xy', [
            {
              axis: 'x',
              getTarget: (function(_this) {
                return function() {
                  var $rulerDom, elseGroup, targets;
                  targets = (function() {
                    var _i, _len, _ref, _results;
                    _ref = this.timeline.groups;
                    _results = [];
                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                      elseGroup = _ref[_i];
                      if (elseGroup !== this) {
                        _results.push(elseGroup.getView().$dom);
                      }
                    }
                    return _results;
                  }).call(_this);
                  if (($rulerDom = _this.timeline.ruler.getView().$dom) != null) {
                    targets.push($rulerDom);
                  }
                  return targets;
                };
              })(this)
            }, {
              axis: 'y',
              getTarget: (function(_this) {
                return function() {
                  var _ref, _ref1;
                  return (_ref = (_ref1 = _this.getView('atSidebar')) != null ? _ref1.$dom : void 0) != null ? _ref : null;
                };
              })(this)
            }
          ]);
          break;
        case 'atSidebar':
          $dom.on("click", function() {
            var currentGroupLines, groupLine, i, key, object, otherLines, ranges;
            object = $dom.data("timeline-host-object");
            ranges = object.timeline.ranges;
            i = 0;
            while (i < ranges.length) {
              ranges[i].views.atRuler.$dom.empty();
              i++;
            }
            currentGroupLines = [];
            otherLines = [];
            object.timeline.lines.map(function(line) {
              if (object.getLines().indexOf(line) === -1) {
                currentGroupLines.push(line);
              } else {
                otherLines.push(line);
              }
            });
            if (object.raw.isHide) {
              object.timeline.lines = currentGroupLines.slice();
              otherLines[0].raw.lines.map(function(line) {
                if (object.timeline.lines.indexOf(line) === -1) {
                  object.timeline.lines.push(line);
                }
              });
            } else {
              groupLine = {};
              for (key in otherLines[0]) {
                groupLine[key] = otherLines[0][key];
              }
              groupLine.raw.lines = [];
              otherLines.map(function(line) {
                groupLine.raw.lines.push(line);
              });
              object.timeline.lines = currentGroupLines.slice();
              object.timeline.lines.push(groupLine);
            }
            object.raw.isHide = !object.raw.isHide;
            object.timeline.render();
          });
          TL.Misc.scrollize($dom, 'y', [
            {
              axis: 'y',
              getTarget: (function(_this) {
                return function() {
                  return _this.getView().$dom;
                };
              })(this)
            }
          ]);
      }
      return $dom;
    };

    Group.prototype.renderDefault = function(view) {
      this.fillDefault(view);
      return this.placeDefault(view);
    };

    Group.prototype.fillDefault = function(view) {
      return this.lookupProperty('fillDefault').call(this, view);
    };

    Group.fillDefault = function(view) {};

    Group.prototype.placeDefault = function(view) {
      return this.lookupProperty('placeDefault').call(this, view);
    };

    Group.placeDefault = function(view) {
      var line, range;
      view.$dom.css({
        top: this.getVerticalOffset(),
        height: this.getInnerHeight()
      });
      return TL.Misc.setInnerSize(view.$dom, {
        x: TL.Misc.sum((function() {
          var _i, _len, _ref, _results;
          _ref = this.timeline.ranges;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            range = _ref[_i];
            _results.push(range.getOuterWidth());
          }
          return _results;
        }).call(this)),
        y: TL.Misc.sum((function() {
          var _i, _len, _ref, _results;
          _ref = this.getLines();
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            line = _ref[_i];
            _results.push(line.getOuterHeight());
          }
          return _results;
        }).call(this))
      });
    };

    Group.prototype.renderAtSidebar = function(view) {
      this.fillAtSidebar(view);
      return this.placeAtSidebar(view);
    };

    Group.prototype.fillAtSidebar = function(view) {
      return this.lookupProperty('fillAtSidebar').call(this, view);
    };

    Group.fillAtSidebar = function(view) {};

    Group.prototype.placeAtSidebar = function(view) {
      return this.lookupProperty('placeAtSidebar').call(this, view);
    };

    Group.placeAtSidebar = function(view) {
      var line;
      view.$dom.css({
        top: this.getVerticalOffset(),
        height: this.getInnerHeight()
      });
      return TL.Misc.setInnerSize(view.$dom, {
        x: this.timeline.sidebar.getInnerWidth(),
        y: TL.Misc.sum((function() {
          var _i, _len, _ref, _results;
          _ref = this.getLines();
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            line = _ref[_i];
            _results.push(line.getOuterHeight());
          }
          return _results;
        }).call(this))
      });
    };

    return Group;

  })(TL.Element);

  TL.Element.Range = (function(_super) {
    __extends(Range, _super);

    function Range() {
      return Range.__super__.constructor.apply(this, arguments);
    }

    Range.prototype.getClassName = function() {
      return 'range';
    };

    Range.prototype.getOffset = function() {
      var elseRange;
      return TL.Misc.sum((function() {
        var _i, _len, _ref, _results;
        _ref = this.timeline.ranges;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          elseRange = _ref[_i];
          if (elseRange.raw.from < this.raw.from) {
            _results.push(elseRange.getOuterWidth());
          }
        }
        return _results;
      }).call(this));
    };

    Range.prototype.getInternalOffset = function(time) {
      return this.getExtraOffsetBefore() + Math.ceil(time / this.timeline.config.scale) - Math.ceil(this.raw.from / this.timeline.config.scale);
    };

    Range.prototype.getInnerWidth = function() {
      return Math.ceil(this.raw.to / this.timeline.config.scale) - Math.ceil(this.raw.from / this.timeline.config.scale);
    };

    Range.prototype.getOuterWidth = function() {
      return this.getInnerWidth() + this.getExtraOffsetBefore() + this.getExtraOffsetAfter();
    };

    Range.prototype.getTimeByOffset = function(offset) {
      return this.getTimeByInternalOffset(offset - this.getOffset() - this.getExtraOffsetBefore());
    };

    Range.prototype.getTimeByInternalOffset = function(internalOffset) {
      return this.raw.from + internalOffset * this.timeline.config.scale;
    };

    Range.prototype.createViews = function() {
      var group, _i, _len, _ref;
      _ref = this.timeline.groups;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        group = _ref[_i];
        this.createView('default', group.getView(), "group=" + group.raw.id);
      }
      return this.createView('atRuler', this.timeline.ruler.getView());
    };

    Range.prototype.createViewDom = function(parent) {
      return TL.Misc.addDom('range', parent.$dom);
    };

    Range.prototype.renderDefault = function(view) {
      this.fillDefault(view);
      return this.placeDefault(view);
    };

    Range.prototype.fillDefault = function(view) {
      return this.lookupProperty('fillDefault').call(this, view);
    };

    Range.fillDefault = function(view) {};

    Range.prototype.placeDefault = function(view) {
      return this.lookupProperty('placeDefault').call(this, view);
    };

    Range.placeDefault = function(view) {
      return view.$dom.css({
        left: this.getOffset(),
        width: this.getInnerWidth()
      });
    };

    Range.prototype.renderAtRuler = function(view) {
      this.fillAtRuler(view);
      return this.placeAtRuler(view);
    };

    Range.prototype.fillAtRuler = function(view) {
      return this.lookupProperty('fillAtRuler').call(this, view);
    };

    Range.fillAtRuler = function(view) {
      var from, to;
      from = moment.unix(this.raw.from).tz(this.timeline.config.timezone).format('DD.MM.YYYY HH:mm:ss');
      to = moment.unix(this.raw.to).tz(this.timeline.config.timezone).format('DD.MM.YYYY HH:mm:ss');
      view.$dom.children('.tl-heading').remove();
      return view.$dom.append(TL.Misc.addDom('heading').text("" + from + " — " + to));
    };

    Range.prototype.placeAtRuler = function(view) {
      return this.lookupProperty('placeAtRuler').call(this, view);
    };

    Range.placeAtRuler = function(view) {
      return view.$dom.css({
        left: this.getOffset(),
        width: this.getInnerWidth()
      });
    };

    return Range;

  })(TL.Element);

  TL.Element.Dash = (function(_super) {
    __extends(Dash, _super);

    function Dash() {
      return Dash.__super__.constructor.apply(this, arguments);
    }

    Dash.prototype.getClassName = function() {
      return 'dash';
    };

    Dash.prototype.getRule = function() {
      return this.timeline.getDashRuleById(this.raw.ruleId);
    };

    Dash.prototype.createViews = function() {
      var group, _i, _len, _ref;
      _ref = this.timeline.groups;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        group = _ref[_i];
        this.createView('default', group.getView(), "group=" + group.raw.id);
      }
      return this.createView('atRuler', this.timeline.ruler.getView());
    };

    Dash.prototype.createViewDom = function(parent) {
      return TL.Misc.addDom('dash', parent.$dom).addClass("id-" + this.raw.ruleId);
    };

    Dash.prototype.renderDefault = function(view) {
      this.fillDefault(view);
      return this.placeDefault(view);
    };

    Dash.prototype.fillDefault = function(view) {
      return this.lookupProperty('fillDefault').call(this, view);
    };

    Dash.fillDefault = function(view) {};

    Dash.prototype.placeDefault = function(view) {
      return this.lookupProperty('placeDefault').call(this, view);
    };

    Dash.placeDefault = function(view) {
      var offset;
      offset = this.timeline.getOffset(this.raw.time);
      if (offset != null) {
        return view.$dom.css({
          left: offset
        });
      }
    };

    Dash.prototype.renderAtRuler = function(view) {
      this.fillAtRuler(view);
      return this.placeAtRuler(view);
    };

    Dash.prototype.fillAtRuler = function(view) {
      return this.lookupProperty('fillAtRuler').call(this, view);
    };

    Dash.fillAtRuler = function(view) {
      view.$dom.children('.tl-text').remove();
      return view.$dom.append(TL.Misc.addDom('text').text(moment.unix(this.raw.time).tz(this.timeline.config.timezone).format('HH:mm')));
    };

    Dash.prototype.placeAtRuler = function(view) {
      return this.lookupProperty('placeAtRuler').call(this, view);
    };

    Dash.placeAtRuler = function(view) {
      var offset;
      offset = this.timeline.getOffset(this.raw.time);
      if (offset != null) {
        return view.$dom.css({
          left: offset
        });
      }
    };

    return Dash;

  })(TL.Element);

  TL.Element.Line = (function(_super) {
    __extends(Line, _super);

    function Line() {
      return Line.__super__.constructor.apply(this, arguments);
    }

    Line.prototype.getClassName = function() {
      return 'line';
    };

    Line.prototype.getVerticalOffset = function() {
      var elseLine;
      return TL.Misc.sum((function() {
        var _i, _len, _ref, _results;
        _ref = this.timeline.lines;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          elseLine = _ref[_i];
          if (!(elseLine.raw.groupId === this.raw.groupId)) {
            continue;
          }
          if (elseLine.raw.id === this.raw.id) {
            break;
          }
          _results.push(elseLine.getOuterHeight());
        }
        return _results;
      }).call(this));
    };

    Line.prototype.getInternalVerticalOffset = function() {
      return this.getExtraOffsetBefore();
    };

    Line.prototype.getParentElement = function() {
      return this.getGroup();
    };

    Line.prototype.getRawHeight = function() {
      return this.lookupProperty('height', 0);
    };

    Line.prototype.getInnerHeight = function() {
      return this.calcSize('Height');
    };

    Line.prototype.getOuterHeight = function() {
      return this.getInnerHeight() + this.getExtraOffsetBefore() + this.getExtraOffsetAfter();
    };

    Line.prototype.getGroup = function() {
      return this.timeline.getGroupById(this.raw.groupId);
    };

    Line.prototype.createViews = function() {
      this.createView('default', this.getGroup().getView());
      return this.createView('atSidebar', this.getGroup().getView('atSidebar'));
    };

    Line.prototype.createViewDom = function(parent) {
      return TL.Misc.addDom('line', parent.$dom).addClass("id-" + this.raw.id);
    };

    Line.prototype.renderDefault = function(view) {
      this.fillDefault(view);
      return this.placeDefault(view);
    };

    Line.prototype.fillDefault = function(view) {
      return this.lookupProperty('fillDefault').call(this, view);
    };

    Line.fillDefault = function(view) {};

    Line.prototype.placeDefault = function(view) {
      return this.lookupProperty('placeDefault').call(this, view);
    };

    Line.placeDefault = function(view) {
      return view.$dom.css({
        top: this.getVerticalOffset(),
        height: this.getInnerHeight()
      });
    };

    Line.prototype.renderAtSidebar = function(view) {
      this.fillAtSidebar(view);
      return this.placeAtSidebar(view);
    };

    Line.prototype.fillAtSidebar = function(view) {
      return this.lookupProperty('fillAtSidebar').call(this, view);
    };

    Line.fillAtSidebar = function(view) {
      view.$dom.children('.tl-heading').remove();
      return view.$dom.append(TL.Misc.addDom('heading').text(this.raw.id));
    };

    Line.prototype.placeAtSidebar = function(view) {
      return this.lookupProperty('placeAtSidebar').call(this, view);
    };

    Line.placeAtSidebar = function(view) {
      return view.$dom.css({
        top: this.getVerticalOffset(),
        height: this.getInnerHeight()
      });
    };

    return Line;

  })(TL.Element);

  TL.Element.Item = (function(_super) {
    __extends(Item, _super);

    function Item() {
      return Item.__super__.constructor.apply(this, arguments);
    }

    Item.prototype.getClassName = function() {
      return 'item';
    };

    Item.prototype.getLine = function() {
      return this.timeline.getLineById(this.raw.lineId);
    };

    Item.prototype.getDuration = function() {
      return this.raw.to - this.raw.from;
    };

    Item.prototype.isDraggable = function() {
      return this.lookupProperty('isDraggable', true);
    };

    Item.prototype.isResizable = function() {
      return this.lookupProperty('isResizable', true);
    };

    Item.prototype.canCrossRanges = function() {
      return this.lookupProperty('canCrossRanges', true);
    };

    Item.prototype.createViews = function() {
      return this.createView('default', this.getLine().getGroup().getView());
    };

    Item.prototype.createViewDom = function(parent, type) {
      var $dom;
      switch (type) {
        case 'default':
          $dom = TL.Misc.addDom('item', parent.$dom);
          if (this.isDraggable()) {
            this.makeDraggable($dom);
          }
          if (this.isResizable()) {
            this.makeResizeableLeft($dom);
          }
          if (this.isResizable()) {
            this.makeResizeableRight($dom);
          }
          return $dom;
      }
    };

    Item.prototype.renderDefault = function(view) {
      this.fillDefault(view);
      return this.placeDefault(view);
    };

    Item.prototype.fillDefault = function(view) {
      return this.lookupProperty('fillDefault').call(this, view);
    };

    Item.fillDefault = function(view) {
      view.$dom.children('.tl-text').remove();
      return view.$dom.append(TL.Misc.addDom('text').text(this.raw.text));
    };

    Item.prototype.placeDefault = function(view) {
      return this.lookupProperty('placeDefault').call(this, view);
    };

    Item.placeDefault = function(view) {
      var line, offset;
      line = this.getLine();
      offset = this.timeline.getOffset(this.raw.from);
      return view.$dom.css({
        top: line.getVerticalOffset() + line.getInternalVerticalOffset(),
        height: line.getInnerHeight(),
        left: offset,
        width: this.timeline.getOffset(this.raw.to - 1) - offset
      });
    };

    Item.prototype.getClone = function() {
      var clone;
      clone = $.extend({}, this);
      clone.raw = $.extend({}, this.raw);
      return clone;
    };

    Item.prototype.makeDraggable = function($dom) {
      var $dragHint, holdPos, modified;
      modified = null;
      $dragHint = null;
      holdPos = null;
      return $dom.draggable({
        helper: (function(_this) {
          return function() {
            return TL.Misc.addDom('drag-helper').css({
              width: $dom.css('width'),
              height: $dom.css('height')
            });
          };
        })(this),
        start: (function(_this) {
          return function(e, ui) {
            var domOffset;
            $dragHint = TL.Misc.addDom('drag-hint', _this.getLine().getGroup().getView().$dom);
            modified = _this.getClone();
            domOffset = $dom.offset();
            holdPos = {
              left: e.pageX - domOffset.left,
              top: e.pageY - domOffset.top
            };
            return _this.timeline.fireEvent('item:drag:start', {
              item: _this
            });
          };
        })(this),
        stop: (function(_this) {
          return function(e, ui) {
            $dragHint.remove();
            $dragHint = null;
            modified = null;
            holdPos = null;
            return _this.timeline.fireEvent('item:drag:stop', {
              item: _this
            });
          };
        })(this),
        drag: (function(_this) {
          return function(e, ui) {
            var attemptLeft, direction, drag, duration, group, newLine, originalLeft, parentOffset;
            group = _this.getLine().getGroup();
            parentOffset = TL.Misc.getScrollContainer(group.getView().$dom).offset();
            drag = {
              event: e,
              parentOffset: parentOffset,
              holdPos: holdPos
            };
            drag.domPos = {
              left: drag.event.pageX - drag.parentOffset.left - drag.holdPos.left,
              top: drag.event.pageY - drag.parentOffset.top - drag.holdPos.top
            };
            duration = _this.getDuration();
            modified.raw.from = _this.timeline.approxTime(_this.timeline.getTime(drag.domPos.left));
            modified.raw.to = modified.raw.from + duration;
            newLine = _this.timeline.getLineByVerticalOffset(group, drag.event.pageY - drag.parentOffset.top);
            if (newLine) {
              modified.raw.lineId = newLine.raw.id;
            }
            if (!modified.isValid()) {
              originalLeft = _this.timeline.getOffset(_this.raw.from);
              direction = Math.sign(drag.domPos.left - originalLeft);
              attemptLeft = drag.domPos.left;
              while (attemptLeft !== originalLeft) {
                attemptLeft -= direction;
                modified.raw.from = _this.timeline.approxTime(_this.timeline.getTime(attemptLeft));
                modified.raw.to = modified.raw.from + duration;
                if (modified.isValid()) {
                  break;
                }
              }
            }
            _this.renderDragHint($dragHint, drag, modified);
            if (modified.isValid()) {
              if (_this.timeline.fireEvent('item:drag', {
                item: modified,
                originalItem: _this
              }) && _this.timeline.fireEvent('item:modify', {
                item: modified,
                originalItem: _this
              })) {
                $.extend(_this.raw, modified.raw);
                return _this.render();
              }
            }
          };
        })(this)
      });
    };

    Item.prototype.renderDragHint = function($dom, drag, modified) {
      this.fillDragHint($dom, drag, modified);
      return this.placeDragHint($dom, drag, modified);
    };

    Item.prototype.fillDragHint = function($dom, drag, modified) {
      return this.lookupProperty('fillDragHint').call(this, $dom, drag, modified);
    };

    Item.fillDragHint = function($dom, drag, modified) {
      var time;
      time = modified.isValid() ? modified.raw.from : this.raw.from;
      if (time != null) {
        return $dom.text(moment.unix(time).tz(this.timeline.config.timezone).format('DD.MM.YYYY HH:mm:ss'));
      }
    };

    Item.prototype.placeDragHint = function($dom, drag, modified) {
      return this.lookupProperty('placeDragHint').call(this, $dom, drag, modified);
    };

    Item.placeDragHint = function($dom, drag, modified) {
      return $dom.css({
        left: drag.event.pageX - drag.parentOffset.left,
        top: drag.event.pageY - drag.parentOffset.top
      });
    };

    Item.prototype.makeResizeableLeft = function($dom) {
      var $resizeHint, $resizerLeft, modified, originalDomOffset, originalDomWidth;
      $resizerLeft = TL.Misc.addDom('resizer-left', $dom);
      $resizeHint = null;
      modified = null;
      originalDomOffset = null;
      originalDomWidth = null;
      return $resizerLeft.draggable({
        axis: 'x',
        helper: (function(_this) {
          return function() {
            return TL.Misc.addDom('resize-helper-left').css({
              width: $resizerLeft.css('width'),
              height: $resizerLeft.css('height')
            });
          };
        })(this),
        start: (function(_this) {
          return function(e, ui) {
            $resizeHint = TL.Misc.addDom('resize-hint', _this.getLine().getGroup().getView().$dom);
            modified = _this.getClone();
            originalDomOffset = _this.timeline.getOffset(_this.raw.from);
            originalDomWidth = _this.timeline.getOffset(_this.raw.to - 1) - originalDomOffset;
            return _this.timeline.fireEvent('item:resize:start', {
              item: _this
            });
          };
        })(this),
        stop: (function(_this) {
          return function(e, ui) {
            $resizeHint.remove();
            $resizeHint["null"];
            modified = null;
            originalDomOffset = null;
            originalDomWidth = null;
            return _this.timeline.fireEvent('item:resize:stop', {
              item: _this
            });
          };
        })(this),
        drag: (function(_this) {
          return function(e, ui) {
            var group, resizeInfo;
            group = _this.getLine().getGroup();
            resizeInfo = {
              parentOffset: TL.Misc.getScrollContainer(group.getView().$dom).offset(),
              event: e,
              ui: ui,
              left: originalDomOffset + (ui.position.left - ui.originalPosition.left),
              width: originalDomWidth - (ui.position.left - ui.originalPosition.left),
              side: 'left'
            };
            $(ui.helper).css({
              marginLeft: -(ui.position.left - ui.originalPosition.left)
            });
            _this.renderResizeHint($resizeHint, resizeInfo);
            modified.raw.from = _this.timeline.approxTime(_this.timeline.getTime(resizeInfo.left));
            if (modified.isValid()) {
              if (_this.timeline.fireEvent('item:resize', {
                item: modified,
                originalItem: _this
              }) && _this.timeline.fireEvent('item:modify', {
                item: modified,
                originalItem: _this
              })) {
                $.extend(_this.raw, modified.raw);
                return _this.render();
              }
            }
          };
        })(this)
      });
    };

    Item.prototype.makeResizeableRight = function($dom) {
      var $resizeHint, $resizerRight, modified, originalDomOffset, originalDomWidth;
      $resizerRight = TL.Misc.addDom('resizer-right', $dom);
      $resizeHint = null;
      modified = null;
      originalDomOffset = null;
      originalDomWidth = null;
      return $resizerRight.draggable({
        axis: 'x',
        helper: (function(_this) {
          return function() {
            return TL.Misc.addDom('resize-helper-right').css({
              width: $resizerRight.css('width'),
              height: $resizerRight.css('height')
            });
          };
        })(this),
        start: (function(_this) {
          return function(e, ui) {
            $resizeHint = TL.Misc.addDom('resize-hint', _this.getLine().getGroup().getView().$dom);
            modified = _this.getClone();
            originalDomOffset = _this.timeline.getOffset(_this.raw.from);
            originalDomWidth = _this.timeline.getOffset(_this.raw.to - 1) - originalDomOffset;
            return _this.timeline.fireEvent('item:resize:start', {
              item: _this
            });
          };
        })(this),
        stop: (function(_this) {
          return function(e, ui) {
            $resizeHint.remove();
            $resizeHint = null;
            modified = null;
            originalDomOffset = null;
            originalDomWidth = null;
            return _this.timeline.fireEvent('item:resize:stop', {
              item: _this
            });
          };
        })(this),
        drag: (function(_this) {
          return function(e, ui) {
            var group, resizeInfo;
            group = _this.getLine().getGroup();
            resizeInfo = {
              parentOffset: TL.Misc.getScrollContainer(group.getView().$dom).offset(),
              event: e,
              ui: ui,
              left: originalDomOffset,
              width: originalDomWidth + (ui.position.left - ui.originalPosition.left),
              side: 'right'
            };
            _this.renderResizeHint($resizeHint, resizeInfo);
            modified.raw.to = _this.timeline.approxTime(_this.timeline.getTime(resizeInfo.left + resizeInfo.width), true);
            if (modified.isValid()) {
              if (_this.timeline.fireEvent('item:resize', {
                item: modified,
                originalItem: _this
              }) && _this.timeline.fireEvent('item:modify', {
                item: modified,
                originalItem: _this
              })) {
                $.extend(_this.raw, modified.raw);
                return _this.render();
              }
            }
          };
        })(this)
      });
    };

    Item.prototype.renderResizeHint = function($dom, resizeInfo) {
      this.fillResizeHint($dom, resizeInfo);
      return this.placeResizeHint($dom, resizeInfo);
    };

    Item.prototype.fillResizeHint = function($dom, resizeInfo) {
      return this.lookupProperty('fillResizeHint').call(this, $dom, resizeInfo);
    };

    Item.fillResizeHint = function($dom, resizeInfo) {
      var offset, time;
      offset = resizeInfo.side === 'left' ? resizeInfo.left : resizeInfo.left + resizeInfo.width;
      time = this.timeline.approxTime(this.timeline.getTime(offset), resizeInfo.side === 'right');
      if (time != null) {
        return $dom.text(moment.unix(time).tz(this.timeline.config.timezone).format('DD.MM.YYYY HH:mm:ss'));
      }
    };

    Item.prototype.placeResizeHint = function($dom, resizeInfo) {
      return this.lookupProperty('placeResizeHint').call(this, $dom, resizeInfo);
    };

    Item.placeResizeHint = function($dom, resizeInfo) {
      return $dom.css({
        left: resizeInfo.event.pageX - resizeInfo.parentOffset.left,
        top: resizeInfo.event.pageY - resizeInfo.parentOffset.top
      });
    };

    Item.prototype.isValid = function() {
      return this.lookupProperty('isValid').call(this);
    };

    Item.isValid = function() {
      var i, rangeFrom, rangeTo;
      if (!(this.raw.from < this.raw.to)) {
        return false;
      }
      if ((this.raw.minDuration != null) && this.raw.to - this.raw.from < this.raw.minDuration) {
        return false;
      }
      rangeFrom = this.timeline.getRangeByTime(this.raw.from);
      if (rangeFrom == null) {
        return false;
      }
      rangeTo = this.timeline.getRangeByTime(this.raw.to - 1);
      if (rangeTo == null) {
        return false;
      }
      if (!(this.canCrossRanges() || rangeFrom === rangeTo)) {
        return false;
      }
      i = 0;
      while (i < this.timeline.items.length) {
        if (this.timeline.items[i].raw.lineId === this.raw.lineId && this.timeline.items[i].raw.to >= this.raw.from) {
          return false;
        }
        i++;
      }
      return true;
    };

    Item.prototype.remove = function() {
      this.timeline.items = this.timeline.items.filter((function(_this) {
        return function(item) {
          return _this !== item;
        };
      })(this));
      return this.destructor();
    };

    return Item;

  })(TL.Element);

  TL.Element.DashRule = (function() {
    function DashRule(timeline, raw) {
      this.timeline = timeline;
      this.raw = raw != null ? raw : {};
      this.insertDashes();
    }

    DashRule.prototype.removeDashes = function() {
      var dash, _i, _len, _ref, _results;
      _ref = this.timeline.dashes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dash = _ref[_i];
        if (this.raw.id === dash.raw.ruleId) {
          _results.push(dash.remove());
        }
      }
      return _results;
    };

    DashRule.prototype.insertDashes = function() {
      return this.timeline.dashes = this.timeline.dashes.concat(this.calculateDashes());
    };

    DashRule.prototype.calculateDashes = function() {
      var dashes, offset, range, step, time, _i, _len, _ref, _ref1, _ref2;
      dashes = [];
      step = (_ref = this.raw.step) != null ? _ref : Infinity;
      offset = (_ref1 = this.raw.offset) != null ? _ref1 : 0;
      _ref2 = this.timeline.ranges;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        range = _ref2[_i];
        if (step === Infinity) {
          time = offset;
        } else {
          time = Math.floor(range.raw.from / step) * step + offset;
        }
        while (time < range.raw.to) {
          if (time >= range.raw.from && !this.isTimeExcluded(time)) {
            dashes.push(this.timeline.createElement('Dash', {
              time: time,
              ruleId: this.raw.id
            }));
          }
          time += step;
        }
      }
      return dashes;
    };

    DashRule.prototype.isTimeExcluded = function(time) {
      var excluderId, _i, _len, _ref;
      if (this.raw.exclude != null) {
        _ref = this.raw.exclude;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          excluderId = _ref[_i];
          if (this.timeline.getDashRuleById(excluderId).hasDashAtTime(time)) {
            return true;
          }
        }
      }
      return false;
    };

    DashRule.prototype.hasDashAtTime = function(time) {
      var offset, step, _ref, _ref1;
      step = (_ref = this.raw.step) != null ? _ref : Infinity;
      offset = (_ref1 = this.raw.offset) != null ? _ref1 : 0;
      return (time - offset) % step === 0;
    };

    return DashRule;

  })();

  TL.Element.Now = (function(_super) {
    __extends(Now, _super);

    function Now() {
      return Now.__super__.constructor.apply(this, arguments);
    }

    Now.prototype.getClassName = function() {
      return 'now';
    };

    Now.prototype.init = function() {
      return this.interval = setInterval((function(_this) {
        return function() {
          _this.raw.time = _this.timeline.getCurrentTime();
          return _this.render();
        };
      })(this), 1000);
    };

    Now.prototype.deinit = function() {
      return clearInterval(this.interval);
    };

    Now.prototype.createViews = function() {
      var group, _i, _len, _ref;
      _ref = this.timeline.groups;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        group = _ref[_i];
        this.createView('default', group.getView(), "group=" + group.raw.id);
      }
      return this.createView('atRuler', this.timeline.ruler.getView());
    };

    Now.prototype.createViewDom = function(parent) {
      return TL.Misc.addDom('now', parent.$dom);
    };

    Now.prototype.renderDefault = function(view) {
      this.fillDefault(view);
      return this.placeDefault(view);
    };

    Now.prototype.fillDefault = function(view) {
      return this.lookupProperty('fillDefault').call(this, view);
    };

    Now.fillDefault = function(view) {};

    Now.prototype.placeDefault = function(view) {
      return this.lookupProperty('placeDefault').call(this, view);
    };

    Now.placeDefault = function(view) {
      var offset;
      offset = this.timeline.getOffset(this.raw.time);
      if (offset != null) {
        return view.$dom.show().css({
          left: offset
        });
      } else {
        return view.$dom.hide();
      }
    };

    Now.prototype.renderAtRuler = function(view) {
      this.fillAtRuler(view);
      return this.placeAtRuler(view);
    };

    Now.prototype.fillAtRuler = function(view) {
      return this.lookupProperty('fillAtRuler').call(this, view);
    };

    Now.fillAtRuler = function(view) {};

    Now.prototype.placeAtRuler = function(view) {
      return this.lookupProperty('placeAtRuler').call(this, view);
    };

    Now.placeAtRuler = function(view) {
      var offset;
      offset = this.timeline.getOffset(this.raw.time);
      if (offset != null) {
        return view.$dom.show().css({
          left: offset
        });
      } else {
        return view.$dom.hide();
      }
    };

    return Now;

  })(TL.Element);

}).call(this);
